<?xml version="1.0" encoding="ISO-8859-1"?>
<!-- 
   DO NOT CHANGE THIS FILE, the file is generated.  
               
   this file is used to validate custom XML configuration for ARCM version: 98.5.1.4
   
-->
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" version="1.0">

<xs:element name="ruleContexts">
	<xs:complexType>
		<xs:sequence>
			<xs:element maxOccurs="unbounded" ref="ruleContext"/>
			<xs:element maxOccurs="unbounded" ref="ruleSet"/>
		</xs:sequence>
	</xs:complexType>
	<xs:unique name="context_id">
		<xs:selector xpath="./context"/>
		<xs:field xpath="@context.id"/>
	</xs:unique>
	<xs:unique name="ruleSet_id">
		<xs:selector xpath="./ruleSet"/>
		<xs:field xpath="@ruleSet.id"/>
	</xs:unique>
</xs:element>
<xs:element name="ruleContext">
    <xs:annotation>
        <xs:documentation>
            Assigns a rule context (i.e. a collection of rule sets) to an object type. Only one rule context is allowed for each object type.
        </xs:documentation>
    </xs:annotation>
	<xs:complexType>
		<xs:attribute name="objectType" type="xs:string" use="required"/>
		<xs:attribute name="ruleSet.idrefs" type="xs:IDREFS" use="required">
            <xs:annotation>
                <xs:documentation>
                    A context can encompass several rule sets which can be used to customize rules without changing the standard rules; the custom files are added as separate rule set.#
                    The rule set IDs are separated by ' '.
                </xs:documentation>
            </xs:annotation>
		</xs:attribute>
	</xs:complexType>
</xs:element>
<xs:element name="ruleSet">
	<xs:complexType>
		<xs:attribute name="id" type="xs:string" use="required">
            <xs:annotation>
                <xs:documentation>
                    Each rule set must have a unique ID.
                </xs:documentation>
            </xs:annotation>
		</xs:attribute>
		<xs:attribute name="drl" type="xs:string" use="required">
            <xs:annotation>
                <xs:documentation>
                    A single .drl file containing the rules. If a custom .drl file has the same name as a standard .drl file, the custom file replaces it.
                </xs:documentation>
            </xs:annotation>
		</xs:attribute>
		<xs:attribute name="dsl" type="xs:string" use="required">
            <xs:annotation>
                <xs:documentation>
                    A single .dsl file containing the rule dsl items. If a custom .dsl file has the same name as a standard .dsl file, the custom file replaces it.
                </xs:documentation>
            </xs:annotation>
		</xs:attribute>
	</xs:complexType>
</xs:element>
<xs:complexType name="classDefinition">
		<xs:sequence>
			<xs:element maxOccurs="unbounded" minOccurs="0" ref="component"/>
			<xs:element maxOccurs="unbounded" minOccurs="0" ref="parameter"/>
		</xs:sequence>
		<xs:attribute name="name" type="xs:string" use="required"/>
		<xs:attribute name="clsName" type="xs:string" use="optional"/>
		<xs:attribute name="extends" type="xs:string" use="optional"/>
	</xs:complexType>
<xs:complexType name="rendererDefinition">
		<xs:sequence>
		    <xs:element maxOccurs="unbounded" ref="renderer"/>
		</xs:sequence>
	</xs:complexType>
<xs:complexType name="layouterDefinition">
		<xs:sequence>
			<xs:element maxOccurs="unbounded" ref="layouter"/>
		</xs:sequence>
	</xs:complexType>
<xs:element name="uiClassMapping">
		<xs:complexType>
			<xs:sequence>
				<xs:element minOccurs="0" ref="renderers"/>
				<xs:element minOccurs="0" ref="filterRenderers"/>
				<xs:element minOccurs="0" ref="columnRenderers"/>
				<xs:element minOccurs="0" ref="reportRenderers"/>
				<xs:element minOccurs="0" ref="layouters"/>
				<xs:element minOccurs="0" ref="controls"/>
			</xs:sequence>
		</xs:complexType>
	</xs:element>
<xs:element name="renderers" type="rendererDefinition"/>
<xs:element name="filterRenderers" type="rendererDefinition"/>
<xs:element name="columnRenderers" type="rendererDefinition"/>
<xs:element name="reportRenderers" type="rendererDefinition">
        <xs:annotation>
            <xs:documentation>
                Contains all report renderer mappings that can be referenced from report definition elements. See reports.xsd for details.
            </xs:documentation>
        </xs:annotation>
    </xs:element>
<xs:element name="layouters" type="layouterDefinition"/>
<xs:element name="controls">
		<xs:complexType>
			<xs:sequence>
				<xs:element maxOccurs="unbounded" ref="control"/>
			</xs:sequence>
		</xs:complexType>
	</xs:element>
<xs:element name="control" type="classDefinition"/>
<xs:element name="renderer">
        <xs:complexType>
            <xs:complexContent>
                <xs:extension base="classDefinition">
                    <xs:attribute default="com.idsscheer.webapps.arcm.bl.report.generator.layout.DefaultReportLayout" name="reportClsName" type="xs:string" use="optional">
                        <xs:annotation>
                            <xs:documentation>
                                All HTML renderer functionalities which change the HTML *layout* (instead of the HMTL representation of the attribute values) can be covered by a report layouter.
                                This layouter returns parts of a report definition which will be used as part of the autogenerated form and list reports. See report documentation for details.
                            </xs:documentation>
                        </xs:annotation>
                    </xs:attribute>
                </xs:extension>
            </xs:complexContent>
        </xs:complexType>
    </xs:element>
<xs:element name="layouter">
        <xs:complexType>
            <xs:complexContent>
                <xs:extension base="classDefinition">
                    <xs:attribute default="com.idsscheer.webapps.arcm.bl.report.generator.layout.DefaultReportLayout" name="reportClsName" type="xs:string" use="optional">
                        <xs:annotation>
                            <xs:documentation>
                                All HTML layouter functionalities which change the HTML layout can be covered by a report layouter.
                                This layouter returns parts of a report definition which will be used as part of the autogenerated form and list reports. See report documentation for details.
                            </xs:documentation>
                        </xs:annotation>
                    </xs:attribute>
                </xs:extension>
            </xs:complexContent>
        </xs:complexType>
    </xs:element>
<xs:element name="component">
		<xs:complexType>
			<xs:attribute name="name" type="xs:string" use="required"/>
			<xs:attribute name="clsName" type="xs:string" use="required"/>
		</xs:complexType>
	</xs:element>
<xs:element name="parameter">
		<xs:complexType>
			<xs:attribute name="name" type="xs:string" use="required"/>
			<xs:attribute name="value" type="xs:string" use="required"/>
		</xs:complexType>
	</xs:element>
<xs:element name="blClassMapping">
    <xs:complexType>
      <xs:sequence>
        <xs:element maxOccurs="unbounded" ref="mappingType"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
<xs:element name="mappingType">
    <xs:complexType>
      <xs:sequence>
        <xs:element maxOccurs="unbounded" ref="mapping"/>
      </xs:sequence>
      <xs:attribute name="name" use="required">
          <xs:simpleType>
              <xs:restriction base="xs:string">
                  <xs:enumeration value="AccessControl"/>
                  <xs:enumeration value="Command"/>
                  <xs:enumeration value="Filter"/>
                  <xs:enumeration value="FormModel"/>
                  <xs:enumeration value="PredefinedValueProvider"/>
                  <xs:enumeration value="Modifier"/>
                  <xs:enumeration value="Validator"/>
                  <xs:enumeration value="NavigationRuntimeAccess"/>

                  <xs:enumeration value="objectTreeProvider"/>
                  <!-- statistics -->
                  <xs:enumeration value="evaluationAccessControl"/>
                  <xs:enumeration value="statisticTreeProvider"/>
                  <xs:enumeration value="statisticDataFilter"/>
                  <xs:enumeration value="statisticDataSource"/>
                  <xs:enumeration value="statisticCalculator"/>
                  <xs:enumeration value="statisticDataLinker"/>
                  <xs:enumeration value="statisticColumnBuilder"/>

                  <!-- TransferApi-->
                  <xs:enumeration value="TransferApi.PostProcessor"/>

                  <xs:enumeration value="MessagePreProcessor"/>

              </xs:restriction>
          </xs:simpleType>
      </xs:attribute>
    </xs:complexType>
  </xs:element>
<xs:element name="mapping">
    <xs:complexType>
      <xs:attribute name="name" type="xs:string" use="required"/>
      <xs:attribute name="clsName" type="xs:string" use="required"/>
    </xs:complexType>
  </xs:element>
<xs:element name="replacements">
		<xs:complexType>
			<xs:sequence>
				<xs:element maxOccurs="unbounded" minOccurs="0" ref="replacement"/>
			</xs:sequence>
		</xs:complexType>
	</xs:element>
<xs:element name="replacement">
		<xs:complexType>
			<!-- the class used in the standard system that will be replaced during runtime -->
			<xs:attribute name="standardClsName" type="xs:string" use="required"/>
			<!-- the replacement class which will be used during runtime instead of the standard class -->
			<xs:attribute name="replacementClsName" type="xs:string" use="required"/>
		</xs:complexType>
	</xs:element>
<xs:element name="vcMapping">
		<xs:complexType>
			<xs:sequence>
				<xs:element maxOccurs="unbounded" minOccurs="0" ref="validator"/>
				<xs:element maxOccurs="unbounded" minOccurs="0" ref="converter"/>
			</xs:sequence>
		</xs:complexType>
	</xs:element>
<xs:element name="validator">
    <xs:annotation>
        <xs:documentation>
            Tag to define a validator.  
        </xs:documentation>
    </xs:annotation>
		<xs:complexType>
			<xs:attribute name="name" type="xs:string" use="required">
                <xs:annotation>
                    <xs:documentation>
                        Name of validator. This name can be registered in the objectTypes.xml for the validation of an attribute.
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
			<xs:attribute name="clsName" type="xs:string" use="required">
                <xs:annotation>
                    <xs:documentation>
                        Fully qualified class name of the validator that enables to integrate the addressed class into the application.
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <!-- default message key in case the validation returns false -->
            <xs:attribute name="propertyKey" type="xs:string" use="optional">
                <xs:annotation>
                    <xs:documentation>
                        Default propertyKey, if the validation is negative.
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
        </xs:complexType>
	</xs:element>
<xs:element name="converter">
        <xs:annotation>
            <xs:documentation>
                Tag to define a converter. 
            </xs:documentation>
        </xs:annotation>
		<xs:complexType>
			<xs:attribute name="name" type="xs:string" use="required">
                <xs:annotation>
                    <xs:documentation>
                        Name of the converter. This name can be registered in the objectTypes.xml for the conversion of an attribute.
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
			<xs:attribute name="clsName" type="xs:string" use="required">
                <xs:annotation>
                    <xs:documentation>
                        Fully qualified class name of the converter which enables to integrate the addressed class into the application.
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
		</xs:complexType>
	</xs:element>
<xs:element name="enumerations">
		<xs:complexType>
			<xs:sequence>
				<xs:element maxOccurs="unbounded" minOccurs="0" ref="enum"/>
			</xs:sequence>
		</xs:complexType>
	</xs:element>
<xs:element name="enum">
		<xs:complexType>
			<xs:sequence>
				<xs:element maxOccurs="unbounded" minOccurs="0" ref="enumitem"/>
			</xs:sequence>
			<xs:attribute name="id" type="xs:string" use="required">
                <xs:annotation>
                <xs:documentation>
                    (Global) unique ID of the enumeration.
                </xs:documentation>
                </xs:annotation>
			</xs:attribute>
			<xs:attribute name="type" use="required">
                <xs:annotation>
                <xs:documentation>
                    Defines the data type which is used in the database (number is more efficient in queries)
                </xs:documentation>
                </xs:annotation>
				<xs:simpleType>
					<xs:restriction base="xs:string">
						<xs:enumeration value="String"/>
						<xs:enumeration value="Number"/>
						<xs:enumeration value="EMPTY"/>
					</xs:restriction>
				</xs:simpleType>
			</xs:attribute>
			<xs:attribute name="isMultiple" type="xs:boolean" use="required">
                <xs:annotation>
                <xs:documentation>
                    If true, the enumeration allows multi selection.
                    Otherwise, single selection.
                </xs:documentation>
                </xs:annotation>
			</xs:attribute>
			<xs:attribute name="itemClass" type="xs:string" use="optional"/>
			<xs:attribute name="enumClass" type="xs:string" use="optional"/>
			<xs:attribute default="false" name="forwardSelection" type="xs:boolean" use="optional">
                <xs:annotation>
                <xs:documentation>
                    If true, the user is not able to choose items backwards (according to the item definition order in the xml file).
                    For example, if item number three is chosen, item number one and two are not available in the selection.
                    They are available, if isMultiple=false.
                </xs:documentation>
                </xs:annotation>
			</xs:attribute>
		</xs:complexType>
	</xs:element>
<xs:element name="enumitem">
		<xs:complexType>
			<xs:sequence>
				<xs:element maxOccurs="unbounded" minOccurs="0" ref="parameter"/>
			</xs:sequence>
			<xs:attribute name="id" type="xs:string" use="required">
                <xs:annotation>
                <xs:documentation>
                    (Local) unique ID of the enumeration item. (Only unique for the related enumeration).
                </xs:documentation>
                </xs:annotation>
			</xs:attribute>
            <xs:attribute name="propertyKey" type="xs:string" use="optional">
                <xs:annotation>
                <xs:documentation>
                    By convention: enumeration.[enum ID].[enum item ID].DBI as property key.
                    Can be overwritten here.
                </xs:documentation>
                </xs:annotation>
            </xs:attribute>
			<xs:attribute name="value" type="xs:string" use="required">
                <xs:annotation>
                <xs:documentation>
                    Unique (numeric) value for this enumeration.
                </xs:documentation>
                </xs:annotation>
			</xs:attribute>
            <xs:attribute name="image" type="xs:string" use="optional">
                <xs:annotation>
                <xs:documentation>
                    The icon which will be displayed in the user interface.
                    Icons should be available in GIF format. Transparent PNGs will not be supported by IE6.
                    Icons are saved under design/default/images/icons.
                </xs:documentation>
                </xs:annotation>
            </xs:attribute>
			<xs:attribute name="virtualScope.idrefs" type="xs:string" use="optional">
                <xs:annotation>
                <xs:documentation>
                    Contains a list of (non-virtual) enumeration item IDs of the same enumeration. The IDs are separated by commas.
                    If specified, item cannot be chosen in forms.
                </xs:documentation>
                </xs:annotation>
			</xs:attribute>
			<xs:attribute default="true" name="formRelevant" type="xs:boolean" use="optional">
                <xs:annotation>
                <xs:documentation>
                    If true item can be chosen in UI forms.
                </xs:documentation>
                </xs:annotation>
			</xs:attribute>
			<xs:attribute default="true" name="filterRelevant" type="xs:boolean" use="optional">
                <xs:annotation>
                <xs:documentation>
                    If true, item can be chosen in UI filters.
                </xs:documentation>
                </xs:annotation>
			</xs:attribute>
			<xs:attribute default="true" name="evaluationRelevant" type="xs:boolean" use="optional">
                <xs:annotation>
                <xs:documentation>
                    If true, item will be available as column in evaluation.
                </xs:documentation>
                </xs:annotation>
			</xs:attribute>
			<xs:attribute default="true" name="isSelectable" type="xs:boolean" use="optional">
                <xs:annotation>
                <xs:documentation>
                    If true, item will be selectable in UI.
                    Otherwise, it will be displayed in bold and italic and cannot be selected.
                    It can be used to categorize the enumeration items.
                    It is only available, if enumeration.isMultiple=false.
                </xs:documentation>
                </xs:annotation>
			</xs:attribute>
			<xs:attribute name="extendedMeaning" use="optional">
                <xs:annotation>
                <xs:documentation>
                    Defines some special enumeration items.
                    'All': Shortcut for a virtual scope containing all other enumeration items.
                    'please_select': If the attribute is mandatory and the value is 'please select', the object cannot be saved until the user chooses another value.
                    'exclusive': Used for enumeration.isMultiple=true.
                                 If an item is exclusive and checked, all other items will be unchecked and locked until this item will be unchecked again.
                </xs:documentation>
                </xs:annotation>
				<xs:simpleType>
					<xs:restriction base="xs:string">
						<xs:enumeration value="all"/>
						<xs:enumeration value="please_select"/>
						<xs:enumeration value="exclusive"/>
					</xs:restriction>
				</xs:simpleType>
			</xs:attribute>
		</xs:complexType>
	</xs:element>
<xs:element name="objectTypes">
        <xs:complexType>
            <xs:sequence>
                <xs:element ref="schema"/>
                <xs:element maxOccurs="unbounded" ref="objectType"/>
            </xs:sequence>
        </xs:complexType>
    </xs:element>
<xs:element name="objectType">
        <xs:annotation>
        <xs:documentation>
            image by attribute or by convention: [id].gif and [id].greyed.gif as icons
            by convention: ctx_[id] as rule context
            by convention: objectType.[id].DBI as property key
            by convention: ARCM_DATAOBJECT_[ID].HLP as help ID
        </xs:documentation>
        </xs:annotation>

        <xs:complexType>
            <xs:choice maxOccurs="unbounded" minOccurs="0">
                <xs:element maxOccurs="unbounded" minOccurs="0" ref="booleanAttrType"/>
                <xs:element maxOccurs="unbounded" minOccurs="0" ref="stringAttrType"/>
                <xs:element maxOccurs="unbounded" minOccurs="0" ref="blobAttrType"/>
                <xs:element maxOccurs="unbounded" minOccurs="0" ref="dateAttrType"/>
                <xs:element maxOccurs="unbounded" minOccurs="0" ref="doubleAttrType"/>
                <xs:element maxOccurs="unbounded" minOccurs="0" ref="enumAttrType"/>
                <xs:element maxOccurs="unbounded" minOccurs="0" ref="longAttrType"/>
                <xs:element maxOccurs="unbounded" minOccurs="0" ref="textAttrType"/>
                <xs:element maxOccurs="unbounded" minOccurs="0" ref="listAttrType"/>
                <xs:element maxOccurs="unbounded" minOccurs="0" ref="index"/>
                <xs:element maxOccurs="unbounded" minOccurs="0" ref="constraint"/>
            </xs:choice>
            <xs:attribute name="id" type="xs:string" use="required">
                <xs:annotation>
                <xs:documentation>
                    Unique ID of the definition.
                </xs:documentation>
                </xs:annotation>
            </xs:attribute>

            <xs:attribute name="xmlexport" type="xs:boolean" use="required"/>
            
            <xs:attribute name="extends" type="xs:string" use="optional">
               <xs:annotation>
                <xs:documentation>
                    Used for inheritance.
                    It refers to the parent object.
                    Object can only extend one object.
                </xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute default="false" name="isAbstract" type="xs:boolean" use="optional">
                <xs:annotation>
                <xs:documentation>
                    Used for inheritance.
                    Abstract objects cannot be created directly. You need an extended object.
                </xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute default="true" name="clientDependent" type="xs:boolean" use="optional">
                <xs:annotation>
                <xs:documentation>
                    If true, the object will be handled as client-dependent.
                </xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="displayAttribute" type="xs:string" use="required">
                <xs:annotation>
                <xs:documentation>
                    ID of attribute.
                    The attribute should contain a representative name of the object.
                </xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="descriptionAttributes" type="xs:string" use="optional">
                <xs:annotation>
                <xs:documentation>
                    Comma-separated list of attributes.
                    The attributes are used to characterize the object and to make it distinguishable from its peers, e.g., in selection lists.
                </xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="licensedComponentIds" type="xs:string" use="optional">
                <xs:annotation>
                <xs:documentation>
                    Comma-separated list of licensedComponentIds, at least one item is necessary.
                </xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute default="masterdata" name="dataKind" use="optional">
                <xs:annotation>
                <xs:documentation>
                    Determines wether the object is part of the master or transactional data.
                </xs:documentation>
                </xs:annotation>
                <xs:simpleType>
                    <xs:restriction base="xs:string">
                        <xs:enumeration value="masterdata"/>
                        <xs:enumeration value="transactiondata"/>
                    </xs:restriction>
                </xs:simpleType>
            </xs:attribute>
            <xs:attribute name="mashzoneId" type="xs:integer" use="optional">
                <xs:annotation>
                <xs:documentation>
                    Unique numeric ID for Mashzone (for aggregation purposes).
                </xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute default="sysadmin" name="arisImportRole" type="xs:string" use="optional">
                <xs:annotation>
                <xs:documentation>
                    Defines which role is to be used during import for validation purposes.
                    Since the data from ARIS is master data, the manager role of the corresponding
                    component should be used.
                </xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="propertyKey" type="xs:string" use="optional">
                <xs:annotation>
                    <xs:documentation>
                        Allows to specify another propertyKey apart from the generic one.
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute default="icons/blank.gif" name="image" type="xs:string" use="optional">
                <xs:annotation>
                    <xs:documentation>
                        Relative path to a picture (in GIF format, 16x16 pixel) from "/design/default/images"
                        e.g. iconlib/icons/IMAGE_NAME.gif
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
        </xs:complexType>
    </xs:element>
<xs:complexType name="abstractAttr">
        <xs:annotation>
        <xs:documentation>
            By convention: Attribute.[dataobject ID].[attribute ID].DBI as property key
            By convention: Attribute.[dataobject ID].[attribute ID].[connectionattribute ID].DBI as property key
        </xs:documentation>
        </xs:annotation>

        <xs:sequence>
            <xs:element maxOccurs="unbounded" minOccurs="0" ref="validate"/>
            <xs:element minOccurs="0" ref="convert"/>
            <xs:element minOccurs="0" ref="modify"/>
        </xs:sequence>
        <xs:attribute name="id" type="xs:string" use="required">
            <xs:annotation>
            <xs:documentation>
                The (local) unique ID of the attribute.
            </xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="behavesLike" type="xs:string" use="optional">
            <xs:annotation>
            <xs:documentation>
                References another attribute of the same object type.
                Rules engine will treat this attribute in the same way as the one specified.
            </xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute default="false" name="isMassEditable" type="xs:boolean" use="optional">
            <xs:annotation>
            <xs:documentation>
                If true, the attribute can be selected is mass editing.
            </xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute default="false" name="isAbstract" type="xs:boolean" use="optional">
            <xs:annotation>
            <xs:documentation>
                Used for inheritance.
                If true, the attribute has to be redefined in the extended object, e.g., to set the unique link type of a list attribute.
            </xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="propertyKey" type="xs:string" use="optional">
            <xs:annotation>
            <xs:documentation>
                Allows to specify another propertyKey apart from the generic one.
            </xs:documentation>
            </xs:annotation>
        </xs:attribute>
    </xs:complexType>
<xs:complexType name="abstractAttrInclDefaultValue">
        <xs:complexContent>
            <xs:extension base="abstractAttr">
                <xs:attribute name="defaultValue" type="xs:string" use="optional">
                    <xs:annotation>
                    <xs:documentation>
                        The value which the attribute will get if a new instance is created.
                    </xs:documentation>
                    </xs:annotation>
                </xs:attribute>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>
<xs:complexType name="abstractAttrInclDefaultValueAndObjectType">
        <xs:complexContent>
            <xs:extension base="abstractAttrInclDefaultValue">
               <xs:attribute name="objectType.idref" type="xs:string" use="optional">
                    <xs:annotation>
                    <xs:documentation>
                        Used to specify an implicit relation to another object type.
                    </xs:documentation>
                    </xs:annotation>
               </xs:attribute>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>
<xs:element name="booleanAttrType" type="abstractAttrInclDefaultValue"/>
<xs:element name="blobAttrType" type="abstractAttr"/>
<xs:element name="textAttrType" type="abstractAttrInclDefaultValueAndObjectType"/>
<xs:element name="dateAttrType">
        <xs:complexType>
            <xs:complexContent>
                <xs:extension base="abstractAttr">
                    <xs:attribute default="day" name="precision" use="optional">
                        <xs:annotation>
                            <xs:documentation>
                                The precision of the date. Valid values are 'day' and 'second'
                            </xs:documentation>
                        </xs:annotation>
                        <xs:simpleType>
                            <xs:restriction base="xs:string">
                                <xs:enumeration value="day"/>
                                <xs:enumeration value="second"/>
                            </xs:restriction>
                        </xs:simpleType>
                    </xs:attribute>
                </xs:extension>
            </xs:complexContent>
        </xs:complexType>
    </xs:element>
<xs:element name="doubleAttrType">
        <xs:complexType>
            <xs:complexContent>
                <xs:extension base="abstractAttrInclDefaultValue">
                    <xs:attribute default="2:2" name="precision" type="xs:string" use="optional">
                        <xs:annotation>
                            <xs:documentation>
                                The precision of the double value it defines the
                                minimum and maximum number of fraction digits separated by ':'
                            </xs:documentation>
                        </xs:annotation>
                    </xs:attribute>
                </xs:extension>
            </xs:complexContent>
        </xs:complexType>
    </xs:element>
<xs:element name="longAttrType">
        <xs:complexType>
            <xs:complexContent>
                <xs:extension base="abstractAttrInclDefaultValueAndObjectType">
                    <xs:attribute default="" name="precision" type="xs:string" use="optional">
                        <xs:annotation>
                            <xs:documentation>
                                The precision of the long value
                            </xs:documentation>
                        </xs:annotation>
                    </xs:attribute>
                </xs:extension>
            </xs:complexContent>
        </xs:complexType>
    </xs:element>
<xs:element name="stringAttrType">
        <xs:complexType>
            <xs:complexContent>
                <xs:extension base="abstractAttrInclDefaultValueAndObjectType">
                    <xs:attribute name="maxCharCount" type="xs:nonNegativeInteger" use="required">
                        <xs:annotation>
                        <xs:documentation>
                            Maximum number of allowed characters.
                        </xs:documentation>
                        </xs:annotation>
                    </xs:attribute>
                    <xs:attribute default="false" name="isClientSign" type="xs:boolean" use="optional">
                        <xs:annotation>
                        <xs:documentation>
                            If true, the attribute is used to store client signs.
                        </xs:documentation>
                        </xs:annotation>
                    </xs:attribute>
                </xs:extension>
            </xs:complexContent>
        </xs:complexType>
    </xs:element>
<xs:element name="enumAttrType">
        <xs:complexType>
            <xs:complexContent>
                <xs:extension base="abstractAttrInclDefaultValue">
                    <xs:attribute name="enumeration" type="xs:string" use="required">
                        <xs:annotation>
                        <xs:documentation>
                            Refers to an enumeration definition.
                        </xs:documentation>
                        </xs:annotation>
                    </xs:attribute>
                </xs:extension>
            </xs:complexContent>
        </xs:complexType>
    </xs:element>
<xs:element name="listAttrType">
        <xs:annotation>
        <xs:documentation>
            List attributes may have child attributes.
            In ARIS Risk &amp; Compliance Manager they are also known as connection attributes.
            For each relation to another object all child attributes are available.
        </xs:documentation>
        </xs:annotation>

        <xs:complexType>
            <xs:choice maxOccurs="unbounded" minOccurs="0">
                <xs:element maxOccurs="unbounded" minOccurs="0" ref="booleanAttrType"/>
                <xs:element maxOccurs="unbounded" minOccurs="0" ref="stringAttrType"/>
                <xs:element maxOccurs="unbounded" minOccurs="0" ref="blobAttrType"/>
                <xs:element maxOccurs="unbounded" minOccurs="0" ref="dateAttrType"/>
                <xs:element maxOccurs="unbounded" minOccurs="0" ref="doubleAttrType"/>
                <xs:element maxOccurs="unbounded" minOccurs="0" ref="enumAttrType"/>
                <xs:element maxOccurs="unbounded" minOccurs="0" ref="longAttrType"/>
                <xs:element maxOccurs="unbounded" minOccurs="0" ref="textAttrType"/>
                <xs:element maxOccurs="unbounded" minOccurs="0" ref="listRestriction"/>
            </xs:choice>
            <xs:attribute name="id" type="xs:string" use="required">
                <xs:annotation>
                <xs:documentation>
                    The (local) unique ID of the attribute.
                </xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="behavesLike" type="xs:string" use="optional">
                <xs:annotation>
                <xs:documentation>
                    References another attribute of the same object type.
                    Rules engine will treat this attribute in the same way as the one specified.
                </xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute default="false" name="isMassEditable" type="xs:boolean" use="optional">
                <xs:annotation>
                <xs:documentation>
                    If true, the attribute can be selected is mass editing.
                </xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute default="false" name="isAbstract" type="xs:boolean" use="optional">
                 <xs:annotation>
                <xs:documentation>
                    Used for inheritance.
                    If true, the attribute has to be redefined in the extended object, e.g., to set the unique link type of a list attribute.
                </xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute default="-1" name="maxSize" type="xs:integer" use="optional">
                 <xs:annotation>
                <xs:documentation>
                    Maximum number of allowed relations to other objects.
                    '-1' means unlimited.
                </xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="objectType.idref" type="xs:string" use="optional">
                <xs:annotation>
                <xs:documentation>
                    Comma-separated list of object type IDs to which the attribute can be connected.
                </xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="linkType" type="xs:string" use="optional">
                <xs:annotation>
                <xs:documentation>
                    The (global) unique ID of the list attribute.
                </xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute default="auto" name="orderType" use="optional">
                <xs:annotation>
                <xs:documentation>
                    The order type allows to specify the sequence of the relations:
                    'auto': Automatically arranged by name identfier in alphabetical order.
                    'hierarchy': Automatically arranged by hierarchy type and name identfier in alphabetical order.
                    'none': No sequencing.
                    'user' The user can rearrange the items manually, new items will be positioned at the end of the list.
                </xs:documentation>
                </xs:annotation>

                <xs:simpleType>
                    <xs:restriction base="xs:string">
                        <xs:enumeration value="auto"/>               
                        <xs:enumeration value="hierarchy"/>
                        <xs:enumeration value="none"/>
                        <xs:enumeration value="user"/>
                    </xs:restriction>
                </xs:simpleType>
            </xs:attribute>
            <!--is hierarchical list attribute-->
            <xs:attribute default="false" name="isHierarchical" type="xs:boolean" use="optional">
                <xs:annotation>
                <xs:documentation>
                    Set to true, if relations are used to create a hierarchy.
                </xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute default="false" name="usingFixChildVersion" type="xs:boolean" use="optional">
                <xs:annotation>
                <xs:documentation>
                    Set this attribute to 'true', if the parent should be linked to 
                    a fixed version of the child instead of the head revision, regardless of the parent�s revision.
                </xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute default="false" name="breakCycle" type="xs:boolean" use="optional">
                <xs:annotation>
                <xs:documentation>
                    Set this option to true, if a link goes back to a superior object resulting in a cycle.
                </xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="partitioningPrefix" type="xs:string" use="optional">
                <xs:annotation>
                    <xs:documentation>
                        This attribute is outdated since ARCM 90.0.x and only part of the XSD for downward compatibility reasons to existing customizings.
                        It has no functional impact on the application anymore.
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="propertyKey" type="xs:string" use="optional">
                <xs:annotation>
                <xs:documentation>
                    Allows to specify another propertyKey apart from the generic one.
                </xs:documentation>
                </xs:annotation>
            </xs:attribute>
        </xs:complexType>
    </xs:element>
<xs:element name="validate">
        <xs:annotation>
        <xs:documentation>
            Allows to specify a field validation for an attribute.
        </xs:documentation>
        </xs:annotation>

        <xs:complexType>
            <xs:attribute name="name" type="xs:string" use="required">
                <xs:annotation>
                <xs:documentation>
                    Name of the validator (see vcreg.xml).
                </xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="arg0" type="xs:string" use="optional"/>
            <xs:attribute name="arg1" type="xs:string" use="optional"/>
            <xs:attribute name="arg2" type="xs:string" use="optional"/>
            <xs:attribute name="arg3" type="xs:string" use="optional"/>
        </xs:complexType>
    </xs:element>
<xs:element name="convert">
        <xs:annotation>
        <xs:documentation>
            Allows to specify a converter for the attribute.
        </xs:documentation>
        </xs:annotation>

        <xs:complexType>
            <xs:attribute name="name" type="xs:string" use="required">
                <xs:annotation>
                <xs:documentation>
                    Name of the converter (see vcreg.xml).
                </xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="arg0" type="xs:string" use="optional"/>
            <xs:attribute name="arg1" type="xs:string" use="optional"/>
            <xs:attribute name="arg2" type="xs:string" use="optional"/>
            <xs:attribute name="arg3" type="xs:string" use="optional"/>
        </xs:complexType>
    </xs:element>
<xs:element name="modify">
        <xs:annotation>
            <xs:documentation>
                Allows to specify a modifier for the attribute.
            </xs:documentation>
        </xs:annotation>

        <xs:complexType>
            <xs:attribute name="name" type="xs:string" use="required">
                <xs:annotation>
                    <xs:documentation>
                        Name of the modifier (see blClassMappings.xml).
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="arg0" type="xs:string" use="optional"/>
            <xs:attribute name="arg1" type="xs:string" use="optional"/>
            <xs:attribute name="arg2" type="xs:string" use="optional"/>
            <xs:attribute name="arg3" type="xs:string" use="optional"/>
        </xs:complexType>
    </xs:element>
<xs:element name="listRestriction">
        <xs:annotation>
        <xs:documentation>
            The allowed object, which can be attached to a list attribute, can be restricted.
            Then, an attribute of the attached object has to have a certain value.
            There can be more than one list restriction at a list attribute.
            In this case. only one of the restrictions must apply (OR connected).
        </xs:documentation>
        </xs:annotation>

        <xs:complexType>
            <xs:sequence>
                <xs:element maxOccurs="unbounded" minOccurs="1" ref="attributeRestriction"/>
            </xs:sequence>
            <xs:attribute default="true" name="selectable" type="xs:boolean" use="optional">
                <xs:annotation>
                <xs:documentation>
                    Used for the selection list generator.
                    If true, the restriction will be ignored in the selection list.
                </xs:documentation>
                </xs:annotation>
            </xs:attribute>
        </xs:complexType>
    </xs:element>
<xs:element name="attributeRestriction">
        <xs:annotation>
        <xs:documentation>
            Specifies the restriction attribute and the allowed value.
            There can be more than one attributeRestriction.
            In this case. all of the restrictions must apply (AND connected).
        </xs:documentation>
        </xs:annotation>

        <xs:complexType>
            <xs:attribute name="attribute" type="xs:string" use="required">
                <xs:annotation>
                <xs:documentation>
                    References an attribute of the target object type.
                </xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="value" type="xs:string" use="required">
                <xs:annotation>
                <xs:documentation>
                    Allowed value of the attribute.
                </xs:documentation>
                </xs:annotation>
            </xs:attribute>
        </xs:complexType>
    </xs:element>
<xs:element name="index">
        <xs:annotation>
        <xs:documentation>
            Defines a search index in the database.
        </xs:documentation>
        </xs:annotation>

        <xs:complexType>
            <xs:sequence>
                <xs:element maxOccurs="unbounded" ref="attributeRef"/>
            </xs:sequence>
            <xs:attribute name="id" type="xs:string" use="required">
                <xs:annotation>
                <xs:documentation>
                    The (global) unique ID of the index.
                </xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="type" type="xs:string" use="required">
                <xs:annotation>
                <xs:documentation>
                    Type of the index, allowed are 'normal' and 'fulltext' for textAttributes.
                </xs:documentation>
                </xs:annotation>
            </xs:attribute>
        </xs:complexType>
    </xs:element>
<xs:element name="constraint">
        <xs:annotation>
        <xs:documentation>
            Defines a constraint in the database.
        </xs:documentation>
        </xs:annotation>

        <xs:complexType>
            <xs:sequence>
                <xs:element maxOccurs="unbounded" ref="attributeRef"/>
            </xs:sequence>
            <xs:attribute name="id" type="xs:string" use="required">
                <xs:annotation>
                <xs:documentation>
                    The (global) unique ID of the constraint.
                </xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="type" type="xs:string" use="required">
                <xs:annotation>
                <xs:documentation>
                    Type of the index, allowed is 'unique'.
                </xs:documentation>
                </xs:annotation>
            </xs:attribute>
        </xs:complexType>
    </xs:element>
<xs:element name="attributeRef">
        <xs:complexType>
            <xs:attribute name="attribute" type="xs:string" use="required"/>
        </xs:complexType>
    </xs:element>
<xs:element name="roles">
        <xs:complexType>
            <xs:sequence>
                <xs:element maxOccurs="1" minOccurs="0" ref="base"/>
                <xs:element maxOccurs="unbounded" minOccurs="0" ref="role"/>
                <xs:element maxOccurs="1" minOccurs="0" ref="roleHierarchies"/>
                <xs:element maxOccurs="1" minOccurs="0" ref="licensedComponents"/>
                <xs:element maxOccurs="1" minOccurs="0" ref="userLicenses"/>
                <xs:element maxOccurs="1" minOccurs="0" ref="rights"/>
            </xs:sequence>
        </xs:complexType>
    </xs:element>
<xs:element name="base">          
        <xs:complexType>
            <xs:sequence>
                <xs:element maxOccurs="unbounded" minOccurs="0" ref="system"/>
                <xs:element maxOccurs="unbounded" minOccurs="1" ref="object"/>
            </xs:sequence>
            <xs:attribute name="licensedComponentIds" type="xs:IDREFS" use="optional"/>
        </xs:complexType>
    </xs:element>
<xs:element name="role">       
        <xs:annotation>
            <xs:documentation>
                Property key is implicitly defined by the following convention: rights.role.{role@id}.DBI 
            </xs:documentation>
        </xs:annotation> 
        <xs:complexType>
            <xs:sequence>
                <xs:element maxOccurs="unbounded" minOccurs="0" ref="system"/>
                <xs:element maxOccurs="unbounded" minOccurs="1" ref="object"/>
            </xs:sequence>
            <xs:attribute name="id" type="xs:string" use="required"/>
            <xs:attribute name="level" use="optional">
				<xs:simpleType>
					<xs:restriction base="xs:string">
						<xs:enumeration value="X"/>
						<xs:enumeration value="XC"/>
						<xs:enumeration value="XCO"/>
						<xs:enumeration value="C"/>
						<xs:enumeration value="CO"/>
						<xs:enumeration value="O"/>
					</xs:restriction>
				</xs:simpleType>
			</xs:attribute>
            <xs:attribute name="licensedComponentIds" type="xs:IDREFS" use="optional"/>
            <xs:attribute name="userLicenses" type="xs:IDREFS" use="required"/>
        </xs:complexType>
    </xs:element>
<xs:element name="object">
        <xs:complexType>
            <xs:sequence>
                <xs:element maxOccurs="unbounded" minOccurs="0" ref="action"/>
                <xs:element maxOccurs="unbounded" minOccurs="0" ref="relation"/>
            </xs:sequence>
            <xs:attribute name="right.idref" type="xs:string" use="required"/>
            <xs:attribute name="objectType.id" type="xs:string" use="required"/>
        </xs:complexType>
    </xs:element>
<xs:element name="system">
        <xs:complexType>
            <xs:attribute name="component.idref" type="xs:string" use="required"/>
        </xs:complexType>
    </xs:element>
<xs:element name="relation">
        <xs:complexType>
            <xs:attribute name="right.idref" type="xs:string" use="required"/>
            <xs:attribute name="listAttrType.id" type="xs:string" use="required"/>
        </xs:complexType>
    </xs:element>
<xs:element name="roleHierarchies">
        <xs:complexType>
            <xs:sequence>
                <xs:element maxOccurs="unbounded" minOccurs="1" ref="roleHierarchy"/>
            </xs:sequence>
        </xs:complexType>
    </xs:element>
<xs:element name="roleHierarchy">
        <xs:complexType>
            <xs:sequence>
                <xs:element maxOccurs="unbounded" minOccurs="1" ref="assignRole"/>
            </xs:sequence>
            <xs:attribute name="role.idref" type="xs:string" use="required"/>
        </xs:complexType>
    </xs:element>
<xs:element name="assignRole">
        <xs:complexType>
            <xs:attribute name="role.idref" type="xs:string" use="required"/>
             <xs:attribute name="level" use="optional">
				<xs:simpleType>
					<xs:restriction base="xs:string">
						<xs:enumeration value="X"/>
						<xs:enumeration value="XC"/>
						<xs:enumeration value="XCO"/>
						<xs:enumeration value="C"/>
						<xs:enumeration value="CO"/>
						<xs:enumeration value="O"/>
					</xs:restriction>
				</xs:simpleType>
			</xs:attribute>
        </xs:complexType>
    </xs:element>
<xs:element name="action">
        <xs:complexType>
            <xs:attribute name="actionRight.idref" type="xs:string" use="optional"/>
        </xs:complexType>
    </xs:element>
<xs:element name="componentRight">
        <xs:annotation>
            <xs:documentation>
                Property key is implicitly defined by the following convention: rights.component.{component@id}.DBI 
            </xs:documentation>
        </xs:annotation> 
        <xs:complexType>
            <xs:attribute name="id" type="xs:string" use="required"/>
        </xs:complexType>
    </xs:element>
<xs:element name="rights">
        <xs:complexType>
            <xs:sequence>
                <xs:element maxOccurs="1" minOccurs="1" ref="objectRights"/>
                <xs:element maxOccurs="1" minOccurs="1" ref="relationRights"/>
                <xs:element maxOccurs="1" minOccurs="1" ref="actionRights"/>
                <xs:element maxOccurs="1" minOccurs="1" ref="systemRights"/>
            </xs:sequence>
        </xs:complexType>
    </xs:element>
<xs:element name="objectRights">
        <xs:complexType>
            <xs:sequence>
                <xs:element maxOccurs="unbounded" minOccurs="1" ref="right"/>
            </xs:sequence>
        </xs:complexType>
    </xs:element>
<xs:element name="licensedComponents">
        <xs:complexType>
            <xs:sequence>
                <xs:element maxOccurs="unbounded" minOccurs="1" ref="licensedComponent"/>
            </xs:sequence>
        </xs:complexType>
    </xs:element>
<xs:element name="userLicenses">
        <xs:complexType>
            <xs:sequence>
                <xs:element maxOccurs="unbounded" minOccurs="1" ref="userLicense"/>
            </xs:sequence>
        </xs:complexType>
    </xs:element>
<xs:element name="relationRights">
        <xs:complexType>
            <xs:sequence>
                <xs:element maxOccurs="unbounded" minOccurs="1" ref="right"/>
            </xs:sequence>
        </xs:complexType>
    </xs:element>
<xs:element name="actionRights">
        <xs:complexType>
            <xs:sequence>
                <xs:element maxOccurs="unbounded" minOccurs="1" ref="actionRight"/>
            </xs:sequence>
        </xs:complexType>
    </xs:element>
<xs:element name="actionRight">
        <xs:complexType>
            <xs:attribute name="id" type="xs:string" use="required"/>
        </xs:complexType>
    </xs:element>
<xs:element name="systemRights">
        <xs:complexType>
            <xs:sequence>
                <xs:element maxOccurs="unbounded" minOccurs="0" ref="componentRight"/>
            </xs:sequence>
        </xs:complexType>
    </xs:element>
<xs:element name="right">
        <xs:complexType>
            <xs:attribute name="id" type="xs:string" use="required"/>
        </xs:complexType>
    </xs:element>
<xs:element name="licensedComponent">
        <xs:complexType>
            <xs:attribute name="id" type="xs:string" use="required"/>
        </xs:complexType>
    </xs:element>
<xs:element name="userLicense">
        <xs:complexType>
            <xs:attribute name="id" type="xs:string" use="required"/>
        </xs:complexType>
    </xs:element>
<xs:element name="rightsPaths">
        <xs:complexType>
            <xs:sequence>
                <xs:element maxOccurs="unbounded" minOccurs="1" ref="paths"/>
            </xs:sequence>
        </xs:complexType>
    </xs:element>
<xs:element name="paths">
        <xs:complexType>
            <xs:sequence>
                <xs:element maxOccurs="unbounded" minOccurs="1" ref="rightsObject"/>
            </xs:sequence>
            <xs:attribute name="role" type="xs:string" use="required">                     
                 <xs:annotation>
                    <xs:documentation>
                        ID of a role (roles.xml).
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
        </xs:complexType>
    </xs:element>
<xs:element name="rightsObject">
        <xs:complexType>
            <xs:sequence>
                <xs:element maxOccurs="unbounded" minOccurs="1" ref="rightsPath"/>
            </xs:sequence>
            <xs:attribute name="objectType" type="xs:string" use="required">                          
                 <xs:annotation>
                    <xs:documentation>
                        objectType ID (objectTypes.xml)
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
        </xs:complexType>
    </xs:element>
<xs:element name="rightsPath">
        <xs:annotation>
            <xs:documentation>
                The rightsPath is a list of 'node' elements which are used to configure a path from
                a USER, USERGROUP or HIERARCHY object type to any other object type.
                
                A user with object-specific rights can see only objects at lists, if a path from the
                main object of the corresponding view to a USER, USERGROUP or HIERARCHY object type is defined.
                
                (In case of USER: The user ID will be added to the conditions/joins, 
                in case of USERGROUP: the user groups will be added to the conditions/joins, 
                in case of HIERARCHY: the hierarchy elements to which the user is assigned will be added to the conditions/joins). 
            </xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:sequence>
                <xs:element maxOccurs="unbounded" minOccurs="0" ref="node"/>
            </xs:sequence>
            <xs:attribute name="dataKind" use="required">
                <xs:simpleType>
                    <xs:restriction base="xs:string">
                        <xs:enumeration value="masterdata"/>
                        <xs:enumeration value="transactiondata"/>
                    </xs:restriction>
                </xs:simpleType>
            </xs:attribute>
        </xs:complexType>
    </xs:element>
<xs:element name="node">
        <xs:complexType>
            <xs:attribute name="from" type="xs:string" use="required">
                 <xs:annotation>
                    <xs:documentation>
                        objectType ID
                        (objectTypes.xml)
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="to" type="xs:string" use="required">                
                 <xs:annotation>
                    <xs:documentation>
                        objectType ID (objectTypes.xml)
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="connectingAttribute" type="xs:string" use="required">                
                 <xs:annotation>
                    <xs:documentation>
                        List attribute ID which is connection the 'from' and 'to' objects.
                        Must be a list attribute of 'from' or 'to' object type.
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
        </xs:complexType>
    </xs:element>
<xs:element name="buttons">
 		<xs:complexType>
 			<xs:sequence>
 				<xs:element maxOccurs="unbounded" ref="buttonDefinition"/>
 			</xs:sequence>
 		</xs:complexType>
 	</xs:element>
<xs:element name="buttonDefinition">
        <xs:annotation>
            <xs:documentation>
                Defines the basic information of a button which can be reused by several similar buttons.
            </xs:documentation>
        </xs:annotation>
		<xs:complexType>
            <xs:sequence>
 				<xs:element maxOccurs="unbounded" ref="button"/>
 			</xs:sequence>
			<xs:attribute name="id" type="xs:string" use="required">
                <xs:annotation>
                <xs:documentation>
                    Unique ID of the definition.
                </xs:documentation>
                </xs:annotation>
			</xs:attribute>
			<xs:attribute name="image" type="xs:string" use="required">
                <xs:annotation>
                <xs:documentation>
                    The icon which will be displayed in the user interface.
                    The icons are saved under design/default/images/.
                </xs:documentation>
                </xs:annotation>
			</xs:attribute>
			<xs:attribute name="propertyKey" type="xs:string" use="optional">
                <xs:annotation>
                <xs:documentation>
                    By convention: If the property key is not specified, the property button.[id].DBI is used ('_' is replaced by '.').
                </xs:documentation>
                </xs:annotation>
			</xs:attribute>
            <xs:attribute name="tooltipPropertyKey" type="xs:string" use="optional">
                <xs:annotation>
                    <xs:documentation>
                        The tooltip that will be displayed when mouse hovers over button.
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
			<xs:attribute name="requiredRights" type="xs:string" use="optional">
                <xs:annotation>
                <xs:documentation>
                    The object or action privilege the user should have to see or use the button.
                    (see roles.xml)
                </xs:documentation>
                </xs:annotation>
			</xs:attribute>
			<xs:attribute name="requireLock" type="xs:boolean" use="optional">
                <xs:annotation>
                <xs:documentation>
                    If true, the user must lock the related object. Otherwise, the button is not active or not available.
                    If false, the state of the button does not depend on the object lock.
                </xs:documentation>
                </xs:annotation>
			</xs:attribute>
			<xs:attribute name="componentId" type="xs:string" use="optional">
                <xs:annotation>
                <xs:documentation>
                    Licence component ID which is necessary to activate the button.
                </xs:documentation>
                </xs:annotation>
			</xs:attribute>
			<xs:attribute default="false" name="isStatic" type="xs:boolean" use="optional">
                <xs:annotation>
                <xs:documentation>
                    If true, the button is always active (e.g. help or copyright button in toolbar).
                </xs:documentation>
                </xs:annotation>
			</xs:attribute>
            <xs:attribute name="objectType" type="xs:string" use="optional">
                <xs:annotation>
                    <xs:documentation>
                        the objectType the rights should checked against
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
		</xs:complexType>
	</xs:element>
<xs:element name="button">
        <xs:annotation>
            <xs:documentation>
                Defines a button which will be referenced in the user interface.
            </xs:documentation>
        </xs:annotation>
		<xs:complexType>
			<xs:attribute name="id" type="xs:string" use="required">
                <xs:annotation>
                <xs:documentation>
                    Unique ID of the button.
                </xs:documentation>
                </xs:annotation>
			</xs:attribute>
			<xs:attribute name="image" type="xs:string" use="optional">
                <xs:annotation>
                <xs:documentation>
                    The icon which will be displayed in the user interface. Overwrites the image defined in buttonDefinition.
                    (see buttonDefinition.image)
                </xs:documentation>
                </xs:annotation>
			</xs:attribute>
			<xs:attribute name="propertyKey" type="xs:string" use="optional">
                <xs:annotation>
                <xs:documentation>
                    (see buttonDefinition.propertyKey) Overwrites the propertyKey defined in buttonDefinition.
                </xs:documentation>
                </xs:annotation>
			</xs:attribute>
            <xs:attribute name="tooltipPropertyKey" type="xs:string" use="optional">
                <xs:annotation>
                    <xs:documentation>
                        (see buttonDefinition.tooltipPropertyKey) Overwrites the tooltipPropertyKey defined in buttonDefinition.
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
			<xs:attribute name="defaultFunction" type="xs:string" use="required">
                <xs:annotation>
                <xs:documentation>
                    Default javascript function which will be called.
                </xs:documentation>
                </xs:annotation>
			</xs:attribute>
			<xs:attribute name="requiredRights" type="xs:string" use="optional">
                <xs:annotation>
                <xs:documentation>
                    (see buttonDefinition.requiredRights) Overwrites requiredRights defined at buttonDefinition.
                </xs:documentation>
                </xs:annotation>
			</xs:attribute>
			<xs:attribute name="requireLock" type="xs:boolean" use="optional">
                <xs:annotation>
                <xs:documentation>
                    (see buttonDefinition.requireLock) Overwrites requireLock defined in buttonDefinition.
                </xs:documentation>
                </xs:annotation>
			</xs:attribute>
			<xs:attribute name="componentId" type="xs:string" use="optional">
                <xs:annotation>
                <xs:documentation>
                    (see buttonDefinition.componentId) Overwrites the componentId defined in buttonDefinition.
                </xs:documentation>
                </xs:annotation>
			</xs:attribute>
		</xs:complexType>
	</xs:element>
<xs:element name="views">
        <xs:annotation>
            <xs:documentation>
                Contains an amount of views which are semantically related e.g.: all component views   
            </xs:documentation>
        </xs:annotation>
		<xs:complexType>
			<xs:sequence>
				<xs:element maxOccurs="unbounded" minOccurs="0" ref="view"/>
			</xs:sequence>
		</xs:complexType>
	</xs:element>
<xs:element name="view">
        <xs:annotation>
            <xs:documentation>
                Data layer view which contains viewobjects, links and conditions.
            </xs:documentation>
        </xs:annotation>
		<xs:complexType>
			<xs:sequence>
				<xs:element maxOccurs="unbounded" ref="viewObject"/>
				<xs:element maxOccurs="unbounded" minOccurs="0" ref="link"/>
				<xs:element minOccurs="0" ref="conditions"/>				
			</xs:sequence>
			<xs:attribute name="id" type="xs:string" use="required">
                <xs:annotation>
                    <xs:documentation>
                        Application-wide unique id of this view. Do only use this ID once!
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
			<xs:attribute name="view.parameter" type="xs:string" use="optional">
                <xs:annotation>
                    <xs:documentation>
                        Introduce here optional view parameter DISTINCT. 
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
			<xs:attribute name="viewHandler" type="xs:string" use="optional">
                <xs:annotation>
                    <xs:documentation>
                        Attribute to define a view handler class fully qualified to make changes in the query definition.
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
			<xs:attribute default="false" name="relevantForMashzoneIntegration" type="xs:boolean" use="optional">
                <xs:annotation>
                    <xs:documentation>
                        True, if the view is relevant for mashzone integration.
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
		</xs:complexType>
	</xs:element>
<xs:element name="viewObject">
        <xs:annotation>
            <xs:documentation>
                The viewObject which represents a table in the database, contains columns. 
            </xs:documentation>
        </xs:annotation>
		<xs:complexType>
			<xs:sequence>
				<xs:element maxOccurs="unbounded" ref="viewColumn"/>
			</xs:sequence>
			<xs:attribute name="id" type="xs:string" use="required"/>
			<xs:attribute name="objectType" type="xs:string" use="required">
                <xs:annotation>
                    <xs:documentation>
                        Object type of the view object references to objectType attribute id inside file objectTypes.xml.
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>


            <!--true if the view object is the main rights object of the view, a view has to have only one
            main view object, is checkt in the mainviewobject validator class-->
			<xs:attribute name="isMainViewObject" type="xs:boolean" use="optional"/>
            <!--restrict the mentioned column to the current user object id-->
			<xs:attribute name="restrictToCurrentUser.id" type="xs:string" use="optional"/>
            <xs:attribute name="preserveRightCheck" type="xs:string" use="optional"/>
         	<xs:attribute name="skipRightsConditionForRoleLevels" type="xs:string" use="optional">
                <xs:annotation>
                    <xs:documentation>
                        A space separated list of role levels which should be ignored in the rights processing of this view.
                        Possible values: "crossclient", "client", "object".
                        Example: "client object" will prevent all rights checks for roles with level "client specific" or "object specific".
                    </xs:documentation>
                </xs:annotation>
			<!--	<xs:simpleType>
					<xs:restriction base="xs:string">
						<xs:enumeration value="crossclient" />
						<xs:enumeration value="client" />
						<xs:enumeration value="object" />
					</xs:restriction>
				</xs:simpleType>-->
			</xs:attribute>
        </xs:complexType>
	</xs:element>
<xs:element name="viewColumn">
        <xs:annotation>
            <xs:documentation>
                Column of a view object. Can be selectable, groupable, orderable and is used for attaching subviews in the
                select part of a query.
                A column may contain subcolumns which then have to be merged by a function, e.g., SUM.
            </xs:documentation>
        </xs:annotation>

		<xs:complexType>      
            <xs:sequence>
				<xs:element maxOccurs="unbounded" minOccurs="0" ref="viewColumn"/>
			</xs:sequence>
             <!-- the id must be unique only inside the view -->
			<xs:attribute name="id" type="xs:string" use="required"/>

			<xs:attribute name="attributeType" type="xs:string" use="required">
                <xs:annotation>
                    <xs:documentation>
                        Attribute type out of the objecttypes.xml of this objecttype.
                        attribute "id" inside tag "...AttrType"
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
			<xs:attribute default="false" name="isSelectColumn" type="xs:boolean" use="optional">
                <xs:annotation>
                    <xs:documentation>
                        True, if the column should occur in the select part of an SQL statement.
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
			<xs:attribute default="false" name="respectUserRights" type="xs:boolean" use="optional">
                <xs:annotation>
                    <xs:documentation>
                        True, if a subquery which is inserted by this column should respect the user rights.
                        Only use together with attribute "subview.id".
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
			<xs:attribute default="false" name="isSortable" type="xs:boolean" use="optional">
                <xs:annotation>
                    <xs:documentation>
                        True, if the column should be orderable. The order statement itself will be added dynamically out of the
                        transferred order values from the BL.
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
			<xs:attribute default="false" name="isGrouped" type="xs:boolean" use="optional">
                <xs:annotation>
                    <xs:documentation>
                        True, if the column should be occur in the order by clausel of the sql statement.
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
			<xs:attribute default="true" name="mashzoneRelevant" type="xs:boolean" use="optional">
                <xs:annotation>
                    <xs:documentation>
                        True, if the column should occur in the mashzone view list in ARCM.
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>

			<xs:attribute name="function" use="optional">
                <xs:annotation>
                    <xs:documentation>
                        Here, you can insert a function which will be used in the SQL statement.
                        Valid values are: SUM, COUNT, COUNT_DISTINCT, MAX, MIN, DIVISION, MULTIPLICATION, ADDITION, SUBSTRACTION
                    </xs:documentation>
                </xs:annotation>
				<xs:simpleType>
					<xs:restriction base="xs:string">
						<xs:enumeration value="SUM"/>
						<xs:enumeration value="COUNT"/>
						<xs:enumeration value="COUNT_DISTINCT"/>
						<xs:enumeration value="MAX"/>
						<xs:enumeration value="MIN"/>
						<xs:enumeration value="DIVISION"/>
						<xs:enumeration value="MULTIPLICATION"/>
						<xs:enumeration value="ADDITION"/>
						<xs:enumeration value="SUBSTRACTION"/>
					</xs:restriction>
				</xs:simpleType>
			</xs:attribute>
			<xs:attribute name="subview.id" type="xs:string" use="optional">
                <xs:annotation>
                    <xs:documentation>
                        You can insert a subview (subselect) which occurs in the select part of the sql statement.
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
		</xs:complexType>
	</xs:element>
<xs:element name="link">
        <xs:annotation>
            <xs:documentation>
                Represents a join between two view objects, inner (default), left, right.
            </xs:documentation>
        </xs:annotation>
		<xs:complexType>
			<xs:sequence>
				<xs:element maxOccurs="unbounded" minOccurs="0" ref="viewColumn"/>
                <xs:element maxOccurs="1" minOccurs="0" ref="compoundCondition"/>
			</xs:sequence>
			<xs:attribute name="linktype.id" type="xs:string" use="required">
                <xs:annotation>
                    <xs:documentation>
                        This id refers to the linkType introduced in objectTypes.xml (inside list attribute).
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
			<xs:attribute name="firstViewObject" type="xs:string" use="required">
                <xs:annotation>
                    <xs:documentation>
                        Left view object for the join.
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
			<xs:attribute name="secondViewObject" type="xs:string" use="required">
                <xs:annotation>
                    <xs:documentation>
                        right view object for the join.
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
			<xs:attribute default="INNER" name="joinType" use="optional">
                <xs:annotation>
                    <xs:documentation>
                        Type of the join. Valid values are:
                        INNER, LIFT, RIGHT
                    </xs:documentation>
                </xs:annotation>
				<xs:simpleType>
					<xs:restriction base="xs:string">
						<xs:enumeration value="INNER"/>
						<xs:enumeration value="LEFT"/>
						<xs:enumeration value="RIGHT"/>
					</xs:restriction>
				</xs:simpleType>
			</xs:attribute>
			<xs:attribute default="false" name="isParentVersionActive" type="xs:boolean" use="optional">
                <xs:annotation>
                    <xs:documentation>
                        True, if the parent has to be always version active = true.
                        This will automatically extend the generated sql by an adequate filter.
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
			<xs:attribute default="true" name="attendVersionizing" type="xs:boolean" use="optional">
                <xs:annotation>
                    <xs:documentation>
                        Flag to disable the versionizing conditions of the join conditions.
                        "attendVersionizing" is set to true by default. This ensures that only active relations to child objects are found.
                        (o2o attribute version_active=1)
                        (o2o attribute parent_version_number_in mus be less or equal current parent version)
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
			<xs:attribute default="true" name="attendFixChildVersionizing" type="xs:boolean" use="optional">
                <xs:annotation>
                    <xs:documentation>
                        Flag to disable the fix child version condition of the join conditions.
                        This flag is true by default, but it also needs a versionized link type to be considered.
                        (xml attribute "usingFixChildVersion" inside link definition of objectTypes.xml).
                        "attendFixChildVersionizing" is set to true by default. This ensures that the correct version of child objects joined to the parent are found.
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
		</xs:complexType>
	</xs:element>
<xs:element name="conditions">
        <xs:annotation>
            <xs:documentation>
                Tag containing the conditions of the view.
            </xs:documentation>
        </xs:annotation>
		<xs:complexType>
			<xs:sequence>
				<xs:choice minOccurs="0">
					<xs:element minOccurs="0" ref="compoundCondition"/>
					<xs:element minOccurs="0" ref="condition"/>
				</xs:choice>
			</xs:sequence>
		</xs:complexType>
	</xs:element>
<xs:element name="compoundCondition">
        <xs:annotation>
            <xs:documentation>
                Tag for collecting normal or compound conditions with AND or OR connectors.
            </xs:documentation>
        </xs:annotation>
		<xs:complexType>
			<xs:choice maxOccurs="unbounded" minOccurs="1">
				<xs:element maxOccurs="unbounded" minOccurs="0" ref="condition"/>
				<xs:element maxOccurs="unbounded" minOccurs="0" ref="compoundCondition"/>
			</xs:choice>
            <!--connects the condition with AND or OR-->
			<xs:attribute name="conditionConnect" use="required">
                <xs:simpleType>
                    <xs:restriction base="xs:string">
                        <xs:enumeration value="AND"/>
                        <xs:enumeration value="OR"/>
                    </xs:restriction>
                </xs:simpleType>
			</xs:attribute>
		</xs:complexType>
	</xs:element>
<xs:element name="condition">
        <xs:annotation>
            <xs:documentation>
                Condition of a view.
            </xs:documentation>
        </xs:annotation>
		<xs:complexType>
			<xs:sequence>
				<xs:element maxOccurs="unbounded" minOccurs="0" ref="combineAttribute"/>
			</xs:sequence>
			<xs:attribute name="viewObject.id" type="xs:string" use="optional">
                <xs:annotation>
                    <xs:documentation>
                        View object to which the condition belongs.
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
			<xs:attribute name="column.id" type="xs:string" use="required">
                <xs:annotation>
                    <xs:documentation>
                        View column to which the condition belongs.
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
			<xs:attribute name="compareType" type="xs:string" use="required">
                <xs:annotation>
                    <xs:documentation>
                        Compare type of the condition, e.g., LIKE, LE, GE, EQ, ISNULL, ...
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
			<xs:attribute name="currentObjectType.id" type="xs:string" use="optional">
                <xs:annotation>
                    <xs:documentation>
                        Defines the current object type, if the condition value should be filled by the current object type.
                        (used internally by GUI models)
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
			<xs:attribute name="currentAttributeType.id" type="xs:string" use="optional">
                <xs:annotation>
                    <xs:documentation>
                        Defines the attribute of the current object type, if the condition value should be filled by the attribute value of the current object type.
                        (used internally by GUI models)
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
			<xs:attribute name="refView.id" type="xs:string" use="optional">
                <xs:annotation>
                    <xs:documentation>
                        Defines a query (parent or sub), if the condition refers to another view.
                        (this leads to an sql sub select inside the filter)
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
			<xs:attribute name="valueColumn.id" type="xs:string" use="optional">
                <xs:annotation>
                    <xs:documentation>
                        Defines the column name of the parent view column to put the value in the condition.
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
			<xs:attribute name="value" type="xs:string" use="optional">
                <xs:annotation>
                    <xs:documentation>
                        Default value of the condition will be overwritten by the value which is transfered from the BL.
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>

			<!-- refactoring -->
			<xs:attribute name="concatBefore" type="xs:string" use="optional">
                <xs:annotation>
                    <xs:documentation>
                        Connects a static string in front of the string value.
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
			<xs:attribute name="concatAfter" type="xs:string" use="optional">
                <xs:annotation>
                    <xs:documentation>
                        Connects a static string behind the string value.
                        (e.g. used to hierarchical prefix sub trees)
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <!--define a function here-->
			<xs:attribute name="function" type="xs:string" use="optional">
                <xs:annotation>
                    <xs:documentation>
                        Defines a SQL92 scalar function here (like CURRENT_DATE).
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
			<xs:attribute default="false" name="readRightToLeft" type="xs:boolean" use="optional">
                <xs:annotation>
                    <xs:documentation>
                        True, if the condition should be interpreted from right to left.
                        Example: left to right x = 4
                                 right to left 4 = x
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
		</xs:complexType>
	</xs:element>
<xs:element name="combineAttribute">
        <xs:annotation>
            <xs:documentation>
                Tag to combine attribute type values of an object with ':' e.g., issue-relevant object id 4711:2
                which are the combine attributes object id and version number.
            </xs:documentation>
        </xs:annotation>
		<xs:complexType>
			<xs:attribute name="attributeType" type="xs:string" use="required"/>
		</xs:complexType>
	</xs:element>
<xs:element name="segregationsOfDuties">
        <xs:annotation>
            <xs:documentation>
                Used to configure segregation of responsibilities.
                A segregation of responsibility always refers to an ObjectType and
                two roles which a user may not have for the given ObjectType.
            </xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:sequence>
                <xs:element maxOccurs="unbounded" minOccurs="1" ref="segregationOfDuties"/>
            </xs:sequence>
        </xs:complexType>
    </xs:element>
<xs:element name="segregationOfDuties">
        <xs:annotation>
            <xs:documentation>
                For the object type specified in the attribute "objectType", a segregation of responsibilities is forced
                for the specified roles.
                The corresponding two roles are configured at the subordinate XML element "segregationsOfDuties.role".

                A user cannot edit an object of the specified "objectType", if he has the two specified roles for the
                object.
                A message with regard to the segregation of responsibilities is then displayed in the form of the
                object.
            </xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:sequence>
                <xs:element maxOccurs="1" minOccurs="0" ref="roleBased"/>
                <xs:element maxOccurs="1" minOccurs="0" ref="userBased"/>
            </xs:sequence>
            <xs:attribute name="objectType" type="xs:string" use="required">
                <xs:annotation>
                    <xs:documentation>
                        The value must be defined in the file "objectTypes.xml" in the "id" attribute of an "objectType"
                        element.
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
        </xs:complexType>
    </xs:element>
<xs:element name="roleBased">
        <xs:complexType>
            <xs:sequence>
                <xs:element maxOccurs="2" minOccurs="2" ref="segregationsOfDuties.role"/>
            </xs:sequence>
        </xs:complexType>
    </xs:element>
<xs:element name="userBased">
        <xs:annotation>
            <xs:documentation>
                For the object type specified in the attribute "objectType", a segregation of responsibilities is forced
                for the specified attributes.
                The corresponding attributes are configured at the subordinate XML element
                "segregationsOfDuties.attributes".

                A user cannot validate an object of the specified "objectType", if he was the one who edited it before.
                A message with regard to the segregation of responsibilities is then displayed in the form of the
                object.
            </xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:sequence>
                <xs:element maxOccurs="unbounded" minOccurs="1" ref="segregationsOfDuties.rule"/>
            </xs:sequence>
        </xs:complexType>
    </xs:element>
<xs:element name="segregationsOfDuties.role">
        <xs:annotation>
            <xs:documentation>
                This element must exist exactly twice with different roles.
                In the "id" attribute, there must be specified a role from "roles.xml" with the "id" attribute and the
                "role" element.
            </xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:attribute name="id" type="xs:string" use="required"/>
        </xs:complexType>
    </xs:element>
<xs:element name="segregationsOfDuties.rule">
        <xs:annotation>
            <xs:documentation>
                This element represent a rule specifying how the user based segregation of duties should be applied for
                a specific object type.
                In the "currentUserRole.idref" attribute, there must be the id of an existing role. The intent here is
                to specify when the rule should be applied.
                In the "notAllowedInAttributes" attribute, it is possible to specify a comma separated list of object
                type's attributes (whose may be only USER) name.

                The semantic of rule is: "if the current user has the role specified in attribute 'currentUserRole',
                then the attributes specified in 'notAllowedInAttributes'
                may not allow the currentUser as their value"
            </xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:attribute name="currentUserRole.idref" type="xs:string" use="required"/>
            <xs:attribute name="notAllowedInAttributes" type="xs:string" use="required"/>
        </xs:complexType>
    </xs:element>
<xs:element name="scripts">
		<xs:complexType>
			<xs:sequence>
				<xs:element maxOccurs="unbounded" minOccurs="0" ref="file"/>
			</xs:sequence>
		</xs:complexType>
	</xs:element>
<xs:element name="styles">
		<xs:complexType>
			<xs:sequence>
				<xs:element maxOccurs="unbounded" minOccurs="0" ref="file"/>
			</xs:sequence>
		</xs:complexType>
	</xs:element>
<xs:element name="file">
        <xs:annotation>
        <xs:documentation>
            Style or javascript file.
        </xs:documentation>
        </xs:annotation>
		<xs:complexType>
			<xs:attribute name="id" type="xs:string" use="required">
                <xs:annotation>
                <xs:documentation>
                    Name of the file.
                </xs:documentation>
                </xs:annotation>
			</xs:attribute>
			<xs:attribute default="false" name="localized" type="xs:boolean" use="optional">
                <xs:annotation>
                <xs:documentation>
                    True, if there exists a file with localized content.
                    (File naming convention: [id]-[locale] )
                </xs:documentation>
                </xs:annotation>
			</xs:attribute>
			<xs:attribute default="false" name="IECompatible" type="xs:boolean" use="optional">
                <xs:annotation>
                <xs:documentation>
                    If true, there is also an IE compatibility file.
                    (File naming convention: [id]_ie )
                </xs:documentation>
                </xs:annotation>
			</xs:attribute>
		</xs:complexType>
	</xs:element>
<xs:element name="includes">
        <xs:annotation>
        <xs:documentation>
            Root element.
        </xs:documentation>
        </xs:annotation>
		<xs:complexType>
			<xs:sequence>
				<xs:element ref="scripts"/>
				<xs:element ref="styles"/>
			</xs:sequence>
		</xs:complexType>
	</xs:element>
<xs:element name="forms">
        <xs:complexType>
            <xs:sequence>
                <xs:element maxOccurs="unbounded" minOccurs="0" ref="form"/>
            </xs:sequence>
        </xs:complexType>
    </xs:element>
<xs:element name="form">
        <xs:annotation>
        <xs:documentation>
            Basic element to define a form for objects or dialogs.
        </xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:sequence>
                <xs:element maxOccurs="1" minOccurs="0" ref="logToolbarButtons"/>
                <xs:element maxOccurs="1" minOccurs="0" ref="formButtons"/>
                <xs:element maxOccurs="unbounded" minOccurs="0" ref="page"/>
            </xs:sequence>

            <xs:attribute name="id" type="xs:string" use="required">
                <xs:annotation>
                <xs:documentation>
                    By convention: Value is always FORM_[ObjectType ID], or DIALOG_[dialog ID]
                </xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute default="form" name="controlName" type="xs:string" use="optional">
                <xs:annotation>
                <xs:documentation>
                    Name of the control (uiClassMapping) which is used to create the HTML.
                </xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute default="tabcontent" name="frame" type="xs:string" use="optional">
                <xs:annotation>
                <xs:documentation>
                    HTML Frame into which the form is placed.
                </xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute default="true" name="showHeaders" type="xs:boolean" use="optional">
                <xs:annotation>
                <xs:documentation>
                    If true, the attribute names of the dialog attributes in dialogs will be shown.
                </xs:documentation>
                </xs:annotation>
            </xs:attribute>
        </xs:complexType>
    </xs:element>
<xs:element name="formButtons">
        <xs:annotation>
        <xs:documentation>
            Defines the buttons which will be available in the forms toolbar.
        </xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:sequence>
                <xs:element maxOccurs="unbounded" minOccurs="0" ref="buttonReference"/>
            </xs:sequence>
        </xs:complexType>
    </xs:element>
<xs:element name="page">
        <xs:annotation>
        <xs:documentation>
            By convention: ARCM_[FORM_ID]_PAGE_[PAGE ID].HLP
        </xs:documentation>
        </xs:annotation>

        <xs:complexType>
            <xs:sequence>
                <xs:choice maxOccurs="1" minOccurs="0">
                    <xs:element maxOccurs="unbounded" minOccurs="0" ref="rowGroup"/>
                    <xs:element maxOccurs="unbounded" minOccurs="0" ref="group"/>
                </xs:choice>
                <xs:element maxOccurs="unbounded" minOccurs="0" ref="javaScriptRef"/>
            </xs:sequence>
            <xs:attribute name="id" type="xs:string" use="required">
                <xs:annotation>
                <xs:documentation>
                    The (local) unique ID of the page
                </xs:documentation>
                </xs:annotation>
            </xs:attribute>

            <xs:attribute name="licensedComponentIds" type="xs:string" use="optional">
                <xs:annotation>
                <xs:documentation>
                    List of licensedComponentIds separated by commas. At least one is necessary to show the page in UI. 
                </xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="propertyKey" type="xs:string" use="optional">
                <xs:annotation>
                <xs:documentation>
                    Used in dialogs to define the title of the dialog.
                </xs:documentation>
                </xs:annotation>
            </xs:attribute>
        </xs:complexType>
    </xs:element>
<xs:element name="group">
        <xs:annotation>
            <xs:documentation>
                Grouping of RowGroups in a page.
            </xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:sequence>
                <xs:element maxOccurs="unbounded" minOccurs="1" ref="rowGroup"/>
            </xs:sequence>
            <xs:attribute name="id" type="xs:string" use="required">
                <xs:annotation>
                    <xs:documentation>
                        The (local) unique id of the row group.
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="propertyKey" type="xs:string" use="required">
                <xs:annotation>
                    <xs:documentation>
                        Used to specify a group title .
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
        </xs:complexType>
    </xs:element>
<xs:element name="rowGroup">
        <xs:annotation>
        <xs:documentation>
            by convention: ARCM_[FORM_ID]_PAGE_[PAGE ID].HLP
        </xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:sequence>
                <xs:element maxOccurs="unbounded" minOccurs="1" ref="row"/>
            </xs:sequence>
            <xs:attribute name="id" type="xs:string" use="required">
                <xs:annotation>
                <xs:documentation>
                    The (local) unique id of the row group.
                </xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="propertyKey" type="xs:string" use="optional">
                <xs:annotation>
                <xs:documentation>
                    Used to specify a title for a row group.
                </xs:documentation>
                </xs:annotation>
            </xs:attribute>
        </xs:complexType>
    </xs:element>
<xs:element name="row">
        <xs:annotation>
        <xs:documentation>
             Row is used to layout a set of attributes (normally just one attribute) with a single title on the left hand side
        </xs:documentation>
        </xs:annotation>

        <xs:complexType>
            <xs:sequence>
                <xs:element maxOccurs="1" minOccurs="0" ref="element"/>
                <xs:element maxOccurs="unbounded" minOccurs="0" ref="cell"/>
                <xs:element maxOccurs="unbounded" minOccurs="0" ref="parameter"/>
                <xs:element maxOccurs="unbounded" minOccurs="0" ref="button.remove"/>
                <xs:element maxOccurs="unbounded" minOccurs="0" ref="button.add"/>
            </xs:sequence>
            <xs:attribute name="id" type="xs:string" use="required">
                <xs:annotation>
                <xs:documentation>
                     (Local) unique ID of the row.
                </xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="attribute.idref" type="xs:string" use="optional">
                <xs:annotation>
                <xs:documentation>
                     Reference to an attribute. Used for list attributes, if there are connection attributes.
                </xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="propertyKey" type="xs:string" use="optional">
                <xs:annotation>
                <xs:documentation>
                     The propertyKey which is used to created the title. If omitted, the propertyKey of the first "element" child node is used.
                </xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute default="formRow" name="template" type="xs:string" use="optional">
                <xs:annotation>
                <xs:documentation>
                    Name of the layouter which is used to create HTML for this row (see uiClassMapping.xml)
                    used in object forms only
                </xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute default="dialogRow" name="dialogTemplate" type="xs:string" use="optional">
                <xs:annotation>
                <xs:documentation>
                     Name of the layouter which is used to create HTML for this row (see uiClassMapping.xml)
                     used in dialog forms only
                </xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute default="protocolRow" name="protocolTemplate" type="xs:string" use="optional">
                <xs:annotation>
                <xs:documentation>
                     the name of the layouter which is used to create HTML for this row (see uiClassMapping.xml)
                     used in log only
                </xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute default="global" name="errorModel" use="optional">
                <xs:annotation>
                <xs:documentation>
                     Defines how error messages will be displayed (only if there are several elements in one row).
                    'global': All error messages from all elements in the row will be collected and displayed at the bottom of this row.
                    'local': Error messages will be displayed at the bottom of each element.
                </xs:documentation>
                </xs:annotation>
                <xs:simpleType>
                    <xs:restriction base="xs:string">
                        <xs:enumeration value="global"/>
                        <xs:enumeration value="local"/>
                    </xs:restriction>
                </xs:simpleType>
            </xs:attribute>
            <xs:attribute default="true" name="protocolRelevant" type="xs:boolean" use="optional">
                <xs:annotation>
                <xs:documentation>
                     If false, row will be invisible in log.
                </xs:documentation>
                </xs:annotation>
            </xs:attribute>
        </xs:complexType>
    </xs:element>
<xs:element name="element">
        <xs:annotation>
        <xs:documentation>
            Element is used to render a single attribute.
        </xs:documentation>
        </xs:annotation>

        <xs:complexType>
            <xs:sequence>
                <xs:element maxOccurs="unbounded" minOccurs="0" ref="parameter"/>
                <xs:element maxOccurs="unbounded" minOccurs="0" ref="javaScriptEvent"/>
                <xs:element maxOccurs="unbounded" minOccurs="0" ref="button.remove"/>
                <xs:element maxOccurs="unbounded" minOccurs="0" ref="button.add"/>
            </xs:sequence>
            <xs:attribute name="name" type="xs:string" use="optional">
                <xs:annotation>
                <xs:documentation>
                     The (row-local) unique name of the element. It is only used, if attribute.idref is not unique within this row.
                </xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="attribute.idref" type="xs:string" use="optional">
                <xs:annotation>
                <xs:documentation>
                     Reference to an attribute.
                </xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="template" type="xs:string" use="optional">
                <xs:annotation>
                <xs:documentation>
                     Renderer name used to creates the HTML to display the specified attribute (see uiClassMapping.xml).
                </xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute default="true" name="protocolRelevant" type="xs:boolean" use="optional">
                <xs:annotation>
                <xs:documentation>
                    If false, element will be invisible in log.
                </xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute default="source" name="primaryDataSource" use="optional">
                <xs:simpleType>
                    <xs:restriction base="xs:string">
                        <xs:enumeration value="source"/>
                        <xs:enumeration value="target"/>
                    </xs:restriction>
                </xs:simpleType>
            </xs:attribute>
            <!-- try to remove if, attribute.idref is unique -->
        </xs:complexType>
    </xs:element>
<xs:element name="cell">
        <xs:annotation>
        <xs:documentation>
            Cells are used to structure the elements in rows.
        </xs:documentation>
        </xs:annotation>

        <xs:complexType>
            <xs:sequence>
                <xs:element maxOccurs="unbounded" minOccurs="1" ref="element"/>
            </xs:sequence>
            <xs:attribute name="separator" type="xs:string" use="optional"/>
        </xs:complexType>
    </xs:element>
<xs:complexType name="AbstractButtonChange">
        <xs:attribute name="location" use="required">
            <xs:annotation>
            <xs:documentation>
                Defines where the button will be placed (in the toolbar or one button for each attached object).
            </xs:documentation>
            </xs:annotation>

            <xs:simpleType>
                <xs:restriction base="xs:string">
                    <xs:enumeration value="toolbar"/>
                    <xs:enumeration value="row"/>
                </xs:restriction>
            </xs:simpleType>
        </xs:attribute>
        <xs:attribute name="button.idref" type="xs:string" use="required">
            <xs:annotation>
            <xs:documentation>
                References a button defined in buttons.xml.
            </xs:documentation>
            </xs:annotation>
        </xs:attribute>
    </xs:complexType>
<xs:element name="button.remove" type="AbstractButtonChange">
        <xs:annotation>
        <xs:documentation>
            Removes one of the default buttons (OPEN, ADD, REMOVE) which are available in list attributes.
        </xs:documentation>
        </xs:annotation>
    </xs:element>
<xs:element name="button.add">
        <xs:annotation>
        <xs:documentation>
            Adds a button to the list attribute.
        </xs:documentation>
        </xs:annotation>

        <xs:complexType>
            <xs:complexContent>
                <xs:extension base="AbstractButtonChange">
                    <xs:attribute default="always" name="type" use="optional">
                        <xs:annotation>
                        <xs:documentation>
                            Defines whether the button is always enabled or only if the list attribute is editable.
                        </xs:documentation>
                        </xs:annotation>

                        <xs:simpleType>
                            <xs:restriction base="xs:string">
                                <xs:enumeration value="always"/>
                                <xs:enumeration value="writable"/>
                            </xs:restriction>
                        </xs:simpleType>
                    </xs:attribute>
                    <xs:attribute name="function" type="xs:string" use="optional">
                        <xs:annotation>
                        <xs:documentation>
                            Javascript function which should be called, if user clicks the button.
                            Overwrites the default function which is defined in buttons.xml.
                        </xs:documentation>
                        </xs:annotation>
                    </xs:attribute>
                </xs:extension>
            </xs:complexContent>
        </xs:complexType>
    </xs:element>
<xs:element name="logToolbarButtons">
        <xs:annotation>
        <xs:documentation>
            Defines the buttons which will be active in the global toolbar, if the log tab is chosen.
        </xs:documentation>
        </xs:annotation>
		<xs:complexType>
            <xs:sequence>
                <xs:element maxOccurs="unbounded" minOccurs="0" ref="buttonReference"/>
            </xs:sequence>
        </xs:complexType>
	</xs:element>
<xs:element name="buttonReference">
        <xs:annotation>
        <xs:documentation>
            Reference to a button defined in buttons.xml.
        </xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:attribute name="button.idref" type="xs:string" use="required">
                <xs:annotation>
                <xs:documentation>
                    Valid ID of a button.
                </xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="function" type="xs:string" use="optional">
                <xs:annotation>
                <xs:documentation>
                    Optional attribute to overwrite the default javascript function defined for the button.
                </xs:documentation>
                </xs:annotation>
            </xs:attribute>
        </xs:complexType>
    </xs:element>
<xs:element name="javaScriptRef">
        <xs:annotation>
        <xs:documentation>
            Includes a javascript file in the HTML output. The javascript file has to be specified in html_includes.xml.
        </xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:attribute name="scriptName" type="xs:string">
            </xs:attribute>
        </xs:complexType>
    </xs:element>
<xs:element name="javaScriptEvent">
        <xs:annotation>
        <xs:documentation>
            Adds an event listener to the corresponding HTML element.
        </xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:attribute name="name" type="xs:string">
                <xs:annotation>
                <xs:documentation>
                    Name of the event, e.g. onclick.
                </xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="expression" type="xs:string">
                <xs:annotation>
                <xs:documentation>
                    Javascript which should be executed, if the event is fired.
                </xs:documentation>
                </xs:annotation>
            </xs:attribute>
        </xs:complexType>
    </xs:element>
<xs:element name="filters">
		<xs:complexType>
			<xs:sequence>
				<xs:element maxOccurs="unbounded" minOccurs="0" ref="filter"/>
			</xs:sequence>
		</xs:complexType>
	</xs:element>
<xs:element name="filter">
		<xs:complexType>
			<xs:sequence>
				<xs:element maxOccurs="unbounded" minOccurs="0" ref="filterRow"/>
			</xs:sequence>
			<xs:attribute name="id" type="xs:string" use="required">
                <xs:annotation>
                <xs:documentation>
                    Global unique identifier of the filter.
                    Convention: ARCM_FILTER_COMMON.HLP as Help Id
                </xs:documentation>
                </xs:annotation>
			</xs:attribute>
			<xs:attribute default="true" name="storable" type="xs:boolean" use="optional">
                <xs:annotation>
                <xs:documentation>
                    Specifies whether the user can store custom filter settings or not.
                </xs:documentation>
                </xs:annotation>
			</xs:attribute>
			<xs:attribute name="dataSource.idref" type="xs:string" use="optional">
                <xs:annotation>
                <xs:documentation>
                    Reference to the data source (objectType.id or view.id).
                </xs:documentation>
                </xs:annotation>
			</xs:attribute>
			<xs:attribute default="view" name="dataSourceType" use="optional">
                <xs:annotation>
                <xs:documentation>
                    Specifies the type of data source.
                </xs:documentation>
                </xs:annotation>
                <xs:simpleType>
                    <xs:restriction base="xs:string">
                        <xs:enumeration value="view"/>
                        <xs:enumeration value="object"/>
                        <xs:enumeration value="none"/>
                    </xs:restriction>
                </xs:simpleType>
			</xs:attribute>
		</xs:complexType>
	</xs:element>
<xs:element name="filterRow">
        <xs:complexType>
            <xs:sequence>
                <xs:element maxOccurs="unbounded" minOccurs="0" ref="filterCell"/>
                <xs:element minOccurs="0" ref="filterElement"/>
            </xs:sequence>
            <xs:attribute name="id" type="xs:string" use="required">
                <xs:annotation>
                <xs:documentation>
                    Local unique identifier of the filter.
                </xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="propertyKey" type="xs:string" use="optional">
                <xs:annotation>
                <xs:documentation>
                    Property key used by the layouter to label the filter attribute.
                    If no propertyKey is specified, the propertyKey of the first childNode of the "filterElement" type is used.
                </xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute default="filter" name="template" type="xs:string" use="optional">
                <xs:annotation>
                <xs:documentation>
                    Specifies the layouter which should be used for this row.
                </xs:documentation>
                </xs:annotation>
            </xs:attribute>
        </xs:complexType>
    </xs:element>
<xs:element name="filterCell">
        <xs:annotation>
        <xs:documentation>
            Cells are used to structure the filterElements of a filterRow.
        </xs:documentation>
        </xs:annotation>

		<xs:complexType>
			<xs:sequence>
				<xs:element maxOccurs="unbounded" ref="filterElement"/>
			</xs:sequence>
			<xs:attribute name="separator" type="xs:string" use="optional"/>
		</xs:complexType>
	</xs:element>
<xs:element name="filterElement">
        <xs:annotation>
        <xs:documentation>
            Element used to render a single attribute.
        </xs:documentation>
        </xs:annotation>

		<xs:complexType>
			<xs:sequence>
				<xs:element maxOccurs="unbounded" minOccurs="0" ref="parameter"/>
				<xs:element maxOccurs="unbounded" minOccurs="0" ref="filterType.parameter"/>
				<xs:element maxOccurs="unbounded" minOccurs="0" ref="javaScriptEvent"/>
				<xs:element maxOccurs="unbounded" minOccurs="0" ref="dependentFilterAttribute"/>
				<xs:element minOccurs="0" ref="filterView"/>
			</xs:sequence>
            <xs:attribute name="dataReference.idref" type="xs:string" use="optional">
                <xs:annotation>
                <xs:documentation>
                    References either a view column or an object attribute type.
                </xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="name" type="xs:string" use="optional">
                 <xs:annotation>
                <xs:documentation>
                    Name used to specify a unique identifier of the element, if n dataReference or enumeration is specified.
                </xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="enumeration.idref" type="xs:string" use="optional">
                <xs:annotation>
                <xs:documentation>
                    References an enumeration.
                    (do not use with dataReferende.idref)
                </xs:documentation>
                </xs:annotation>
            </xs:attribute>
			<xs:attribute name="template" type="xs:string" use="optional">
                <xs:annotation>
                <xs:documentation>
                    Specifies the filter renderer which is used to create the HTML code for the filter attribute.
                    If no template is specified, the default renderer for the attribute is used.
                </xs:documentation>
                </xs:annotation>
			</xs:attribute>
			<xs:attribute name="default" type="xs:string" use="optional">
                <xs:annotation>
                <xs:documentation>
                    Default value for the filter attribute.
                </xs:documentation>
                </xs:annotation>
			</xs:attribute>
			<xs:attribute name="filterType" type="xs:string" use="optional">
                <xs:annotation>
                <xs:documentation>
                    Specifies the implementation of the filter attribute which is used in the filter data model.
                    If filterType is not specified, the default depending on dataReference.idref will be used.
                </xs:documentation>
                </xs:annotation>
			</xs:attribute>
            <xs:attribute name="compareType" type="xs:string" use="optional">
                <xs:annotation>
                <xs:documentation>
                    Specifies the compare type which is used in the views (e.g.: like, equals, ....)
                </xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute default="false" name="isQueryFilterAttribute" type="xs:boolean" use="optional">
                <xs:annotation>
                    <xs:documentation>
                        This attribute is read as "true" if a data reference is set!
                        If no data reference is set then this flag specifies if this filter attribute still returns
                        valid view filter criteria and must thus be included when executing query filters.
                        This is the case if the filter is a special implementation which creates hard coded filter
                        criteria which are not mentioned in this filter XML definition.
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
		</xs:complexType>
	</xs:element>
<xs:element name="filterType.parameter">
		<xs:complexType>
			<xs:attribute name="name" type="xs:string" use="required"/>
			<xs:attribute name="value" type="xs:string" use="required"/>
		</xs:complexType>
	</xs:element>
<xs:element name="dependentFilterAttribute">
        <xs:annotation>
        <xs:documentation>
            Used to specify filter attributes depenDing on the current filter attribute.
            This also causes the related control (list/evaluation) to not showing any data until
            the current filter attribute has a valid selection (e.g. a certain client).
            If the selection of the current filter attribute is changed, the dependent filter
            attributes will be informed, their selection is cleared and their predefined values are recalculated.
        </xs:documentation>
        </xs:annotation>

		<xs:complexType>
			<xs:attribute name="attribute.idref" type="xs:string" use="required">
                <xs:annotation>
                <xs:documentation>
                    ID of a dependent filter attribute.
                </xs:documentation>
                </xs:annotation>
			</xs:attribute>
		</xs:complexType>
	</xs:element>
<xs:element name="filterView">
        <xs:annotation>
        <xs:documentation>
            Used to retrieve the set of predefined values by a view.
            The visible text for each option consists of '[clientSign] - [text] ([subtext])'.
            If one of the optional attributes (&#145;clientsign&#146;, &#145;subtext&#146;) is not specified, it will not be displayed.
        </xs:documentation>
        </xs:annotation>

       <xs:complexType>
			<xs:sequence>
				<xs:element maxOccurs="unbounded" minOccurs="0" ref="option"/>
			</xs:sequence>
			<xs:attribute name="view.idref" type="xs:string" use="required">
                <xs:annotation>
                <xs:documentation>
                    ID of the view which will collect the options.
                </xs:documentation>
                </xs:annotation>
			</xs:attribute>
			<xs:attribute name="valueColumn.idref" type="xs:string" use="required">
                <xs:annotation>
                <xs:documentation>
                    ID of the column which contains the value.
                    The selected value will be processed in the evaluation or list.
                </xs:documentation>
                </xs:annotation>
			</xs:attribute>
			<xs:attribute name="textColumn.idref" type="xs:string" use="required">
                <xs:annotation>
                <xs:documentation>
                    ID of the column which contains a name or another displayable value.
                </xs:documentation>
                </xs:annotation>
			</xs:attribute>
			<xs:attribute name="subTextColumn.idref" type="xs:string" use="optional">
                <xs:annotation>
                <xs:documentation>
                    ID of the column which contains additional text or name.
                </xs:documentation>
                </xs:annotation>
			</xs:attribute>
		    <xs:attribute name="clientSignColumn.idref" type="xs:string" use="optional">
                <xs:annotation>
                <xs:documentation>
                    ID of the column which contains the client sign.
                </xs:documentation>
                </xs:annotation>
		    </xs:attribute>
		</xs:complexType>
    </xs:element>
<xs:element name="option">
        <xs:complexType>
            <xs:attribute name="value" type="xs:string" use="required"/>
            <xs:attribute name="propertyKey" type="xs:string" use="required"/>
        </xs:complexType>
    </xs:element>
<xs:element name="lists">
		<xs:complexType>
			<xs:sequence>
				<xs:element maxOccurs="unbounded" minOccurs="0" ref="list"/>
				<xs:element maxOccurs="unbounded" minOccurs="0" ref="treeList"/>
			</xs:sequence>
		</xs:complexType>
	</xs:element>
<xs:element name="list">
        <xs:annotation>
        <xs:documentation>
            By convention: ARCM_LIST_[ID].HLP as help ID.
        </xs:documentation>
        </xs:annotation>

		<xs:complexType>
			<xs:sequence>
				<xs:element maxOccurs="unbounded" minOccurs="0" ref="roleRestriction"/>
				<xs:element maxOccurs="4" minOccurs="0" ref="simpleFilterRow"/>
				<xs:element maxOccurs="unbounded" minOccurs="0" ref="extendedFilterRow"/>
				<xs:element maxOccurs="unbounded" ref="listHeaderRow"/>
				<xs:element maxOccurs="unbounded" ref="column"/>
				<xs:element maxOccurs="1" minOccurs="1" ref="listButtons"/>
				<xs:element maxOccurs="1" minOccurs="1" ref="rowButtons"/>
				<xs:element maxOccurs="unbounded" minOccurs="0" ref="javaScriptRef"/>
			</xs:sequence>
			<xs:attribute name="id" type="xs:string" use="required">
                <xs:annotation>
                <xs:documentation>
                    Global unique ID of the list.
                </xs:documentation>
                </xs:annotation>
			</xs:attribute>
            <xs:attribute name="propertyKey" type="xs:string" use="optional">
                <xs:annotation>
                <xs:documentation>
                    PropertyKey which is displayed in the breadcrumb. Lists on tabs must not have a propertyKey.
                </xs:documentation>
                </xs:annotation>
            </xs:attribute>

			<xs:attribute name="view.idref" type="xs:string" use="optional">
                <xs:annotation>
                <xs:documentation>
                    Reference to a view definition.
                </xs:documentation>
                </xs:annotation>
			</xs:attribute>
			<xs:attribute name="filter.idref" type="xs:string" use="optional">
                <xs:annotation>
                <xs:documentation>
                    Reference to a filter definition.
                </xs:documentation>
                </xs:annotation>
			</xs:attribute>

			<xs:attribute name="idColumn.idref" type="xs:string" use="required">
                <xs:annotation>
                <xs:documentation>
                    Reference to the ID column of the main view object.
                </xs:documentation>
                </xs:annotation>
			</xs:attribute>
			<xs:attribute name="nameColumn.idref" type="xs:string" use="optional">
                <xs:annotation>
                <xs:documentation>
                    Reference to the name column of the main view object.
                </xs:documentation>
                </xs:annotation>
			</xs:attribute>
			<xs:attribute name="versionColumn.idref" type="xs:string" use="optional">
                <xs:annotation>
                <xs:documentation>
                    Reference to the version column of the main view object.
                </xs:documentation>
                </xs:annotation>
			</xs:attribute>
			<xs:attribute name="defaultOrderColumn.idref" type="xs:string" use="optional">
                <xs:annotation>
                <xs:documentation>
                    Reference to the view column used to sort the view.
                </xs:documentation>
                </xs:annotation>
			</xs:attribute>
			<xs:attribute name="defaultOrderDirection.idref" use="optional">
                <xs:annotation>
                <xs:documentation>
                    Direction in which the view will be ordered.
                </xs:documentation>
                </xs:annotation>

				<xs:simpleType>
					<xs:restriction base="xs:string">
						<xs:enumeration value="ASCENDING"/>
						<xs:enumeration value="DESCENDING"/>
					</xs:restriction>
				</xs:simpleType>
			</xs:attribute>
            <xs:attribute default="standard" name="listType" use="optional">
                <xs:annotation>
                <xs:documentation>
                    Type of the list (standard, selection, assignment).
                </xs:documentation>
                </xs:annotation>

                <xs:simpleType>
					<xs:restriction base="xs:string">
						<xs:enumeration value="standard"/>
						<xs:enumeration value="selection"/>
						<xs:enumeration value="assignment"/>
						<xs:enumeration value="custom"/>
					</xs:restriction>
				</xs:simpleType>
            </xs:attribute>

			<xs:attribute name="srcDataType.idref" type="xs:string" use="optional">
                <xs:annotation>
                <xs:documentation>
                    Used for assignments and selection lists.
                    Defines the object type to which the selected objects will be related.
                </xs:documentation>
                </xs:annotation>
			</xs:attribute>
			<xs:attribute name="srcAttributeType.idref" type="xs:string" use="optional">
                <xs:annotation>
                <xs:documentation>
                    Used for assignment lists.
                    Defines the attribute to which the selected objects will be related.
                </xs:documentation>
                </xs:annotation>
			</xs:attribute>
			<!-- Parent object for reverse refLists -->
			<xs:attribute name="destDataType.idref" type="xs:string" use="optional">
                <xs:annotation>
                <xs:documentation>
                    Used for selection lists.
                    Defines the object type to which the selected objects will be related.
                </xs:documentation>
                </xs:annotation>
			</xs:attribute>
			<xs:attribute name="destAttributeType.idref" type="xs:string" use="optional">
                <xs:annotation>
                <xs:documentation>
                    Used for selection lists.
                    Defines the attribute to which the selected objects will be related.
                </xs:documentation>
                </xs:annotation>
			</xs:attribute>
			
			<xs:attribute default="true" name="isPageable" type="xs:boolean" use="optional">
                <xs:annotation>
                <xs:documentation>
                    If true, paging is enabled.
                </xs:documentation>
                </xs:annotation>
			</xs:attribute>

			<xs:attribute default="true" name="canObjectsBeReactivated" type="xs:boolean" use="optional">
                <xs:annotation>
                <xs:documentation>
                    If true, reactivate buttons will be displayed, if there is a deleted object in the result set.
                </xs:documentation>
                </xs:annotation>
			</xs:attribute>
			<xs:attribute default="true" name="useCheckBoxes" type="xs:boolean" use="optional">
                <xs:annotation>
                <xs:documentation>
                    If true, check boxes for each row and list buttons will be rendered.
                </xs:documentation>
                </xs:annotation>
			</xs:attribute>
			<xs:attribute default="false" name="allowMarkAsIssueRelevant" type="xs:boolean" use="optional">
                <xs:annotation>
                <xs:documentation>
                    If true, elements can be marked as issue-relevant.
                </xs:documentation>
                </xs:annotation>
			</xs:attribute>

            <xs:attribute default="masterdata" name="rightsPath.datakind" type="xs:string" use="optional">
                <xs:annotation>
                <xs:documentation>
                    Defines the rights path to be used (masterdata or transactiondata).
                </xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="customModelClass" type="xs:string" use="optional"/>
			<xs:attribute name="frame" type="xs:string" use="optional">
                <xs:annotation>
                <xs:documentation>
                    HTML frame in which the form is placed.
                </xs:documentation>
                </xs:annotation>
			</xs:attribute>
            <xs:attribute default="list" name="controlName" type="xs:string" use="optional">
                <xs:annotation>
                <xs:documentation>
                    Name of the control (uiClassMapping) which is used to create the HTML.
                </xs:documentation>
                </xs:annotation>
            </xs:attribute>

			<xs:attribute name="relatedObjectType.idref" type="xs:string" use="optional">
                <xs:annotation>
                <xs:documentation>
                    Defines the main object type of the objects in the result set.
                </xs:documentation>
                </xs:annotation>
			</xs:attribute>
			<xs:attribute default="true" name="ignoreRoleRestriction" type="xs:boolean" use="optional">
                <xs:annotation>
                <xs:documentation>
                    Default is "true" to ignore role restrictions for data-selection.
                    Set to "false", the reduced role-set of a specific restricted user-context will be used.
                </xs:documentation>
                </xs:annotation>
			</xs:attribute>
		</xs:complexType>
	</xs:element>
<xs:element name="treeList">
        <xs:annotation>
        <xs:documentation>
            By convention: ARCM_LIST_[ID].HLP as help ID.
        </xs:documentation>
        </xs:annotation>

		<xs:complexType>
			<xs:sequence>
				<xs:element maxOccurs="unbounded" minOccurs="0" ref="roleRestriction"/>
				<xs:element maxOccurs="2" minOccurs="0" ref="simpleFilterRow"/>
				<xs:element maxOccurs="unbounded" minOccurs="0" ref="listHeaderRow"/>
				<xs:element maxOccurs="unbounded" ref="treeRow"/>
				<xs:element maxOccurs="1" minOccurs="1" ref="listButtons"/>
				<xs:element maxOccurs="1" minOccurs="1" ref="rowButtons"/>
			</xs:sequence>
			<xs:attribute name="id" type="xs:string" use="required">
                <xs:annotation>
                <xs:documentation>
                    Global unique ID of the list.
                </xs:documentation>
                </xs:annotation>
			</xs:attribute>
			<xs:attribute name="propertyKey" type="xs:string" use="optional">
                <xs:annotation>
                <xs:documentation>
                    Property key which is displayed in the breadcrumb. Lists on tabs may not have a propertyKey.
                </xs:documentation>
                </xs:annotation>
			</xs:attribute>

			<xs:attribute name="filter.idref" type="xs:string" use="optional">
                <xs:annotation>
                <xs:documentation>
                    Reference to a filter definition.
                </xs:documentation>
                </xs:annotation>
			</xs:attribute>
			<xs:attribute name="useCheckBoxes" type="xs:boolean" use="required">
                <xs:annotation>
                <xs:documentation>
                    If true, check boxes for each row and list button will be rendered.
                </xs:documentation>
                </xs:annotation>
			</xs:attribute>
			<xs:attribute name="relatedObjectType.idref" type="xs:string" use="optional">
                <xs:annotation>
                <xs:documentation>
                    Defines the main object type of the objects in the result set.
                </xs:documentation>
                </xs:annotation>
			</xs:attribute>
			<xs:attribute default="false" name="allowMarkAsIssueRelevant" type="xs:boolean" use="optional">
                <xs:annotation>
                <xs:documentation>
                    If true, elements may be marked as issue-relevant.
                </xs:documentation>
                </xs:annotation>
			</xs:attribute>
			<xs:attribute default="masterdata" name="rightsPath.datakind" type="xs:string" use="optional">
                <xs:annotation>
                <xs:documentation>
                    Defines the rights path to be used (masterdata or transactiondata).
                </xs:documentation>
                </xs:annotation>
			</xs:attribute>

			<xs:attribute name="customModelClass" type="xs:string" use="optional"/>
			<xs:attribute default="treelist" name="controlName" type="xs:string" use="optional">
                <xs:annotation>
                <xs:documentation>
                    Name of the control (uiClassMapping) which is used to create the HTML.
                </xs:documentation>
                </xs:annotation>
			</xs:attribute>
			<xs:attribute name="frame" type="xs:string" use="optional">
                <xs:annotation>
                <xs:documentation>
                    HTML frame in which the form is placed.
                </xs:documentation>
                </xs:annotation>
			</xs:attribute>
            <xs:attribute default="false" name="ignoreRoleRestriction" type="xs:boolean" use="optional">
                <xs:annotation>
                <xs:documentation>
                    If true, role restrictions will be ignored.
                </xs:documentation>
                </xs:annotation>
            </xs:attribute>
		</xs:complexType>
	</xs:element>
<xs:element name="treeRow">
		<xs:complexType>
			<xs:sequence>
				<xs:element maxOccurs="unbounded" minOccurs="0" ref="column"/>
			</xs:sequence>
			<xs:attribute name="id" type="xs:string" use="required"/>
			<xs:attribute default="inline" name="visType" type="xs:string" use="optional"/>
			<xs:attribute name="relatedTreeRow.idref" type="xs:string" use="optional"/>
			<xs:attribute default="false" name="preload" type="xs:boolean" use="optional"/>
			<xs:attribute default="false" name="createAnchor" type="xs:boolean" use="optional"/>
			<xs:attribute default="0" name="span" type="xs:integer" use="optional"/>
            <xs:attribute name="view.idref" type="xs:string" use="optional"/>
			<xs:attribute name="idColumn.idref" type="xs:string" use="optional"/>
			<xs:attribute name="nameColumn.idref" type="xs:string" use="optional"/>
			<xs:attribute name="versionColumn.idref" type="xs:string" use="optional"/>
		</xs:complexType>
	</xs:element>
<xs:element name="roleRestriction">
        <xs:annotation>
        <xs:documentation>
            Allows to restrict the list and the result set to certain roles.
        </xs:documentation>
        </xs:annotation>
		<xs:complexType>
			<xs:attribute name="role" type="xs:string" use="required"/>
		</xs:complexType>
	</xs:element>
<xs:complexType name="quickFilterElement">
        <xs:annotation>
        <xs:documentation>
             Reference to a filter element.
        </xs:documentation>
        </xs:annotation>

		<xs:attribute name="filterRow.idref" type="xs:string" use="required"/>
		<xs:attribute default="1" name="rowSpan" type="xs:string" use="optional"/>
	</xs:complexType>
<xs:element name="simpleFilterRow">
        <xs:annotation>
        <xs:documentation>
             Used to structure the filter elements above the list.
        </xs:documentation>
        </xs:annotation>
		<xs:complexType>
			<xs:sequence>
				<xs:element maxOccurs="4" minOccurs="1" ref="simpleFilter"/>
			</xs:sequence>
		</xs:complexType>
	</xs:element>
<xs:element name="simpleFilter" type="quickFilterElement"/>
<xs:element name="extendedFilterRow">
        <xs:annotation>
        <xs:documentation>
             Used to structure the expanded filter elements above the list.
        </xs:documentation>
        </xs:annotation>

		<xs:complexType>
			<xs:sequence>
				<xs:element maxOccurs="4" minOccurs="1" ref="extendedFilter"/>
			</xs:sequence>
		</xs:complexType>
	</xs:element>
<xs:element name="extendedFilter" type="quickFilterElement"/>
<xs:element name="listHeaderRow">
        <xs:annotation>
        <xs:documentation>
             Used to layout the header of lists. A list may consist of several rows.
        </xs:documentation>
        </xs:annotation>

		<xs:complexType>
			<xs:sequence>
				<xs:element maxOccurs="unbounded" minOccurs="0" ref="listHeader"/>
			</xs:sequence>
		</xs:complexType>
	</xs:element>
<xs:element name="listHeader">
        <xs:annotation>
        <xs:documentation>
             defines a single header cell
        </xs:documentation>
        </xs:annotation>

		<xs:complexType>
			<xs:attribute name="propertyKey" type="xs:string" use="required">
                <xs:annotation>
                <xs:documentation>
                     PropertyKey which is used to create the title of the header cell.
                </xs:documentation>
                </xs:annotation>
			</xs:attribute>
			<xs:attribute name="tooltip" type="xs:string" use="optional">
                <xs:annotation>
                <xs:documentation>
                     PropertyKey which is used to create a tooltip on the header cell.
                </xs:documentation>
                </xs:annotation>
			</xs:attribute>
			<xs:attribute default="1" name="colSpan" type="xs:integer" use="optional">
                <xs:annotation>
                <xs:documentation>
                     Allows header cells to cover several columns.
                </xs:documentation>
                </xs:annotation>
			</xs:attribute>
			<xs:attribute default="1" name="rowSpan" type="xs:integer" use="optional">
                <xs:annotation>
                <xs:documentation>
                      Allows header cells to cover several header rows.
                </xs:documentation>
                </xs:annotation>
			</xs:attribute>
			<xs:attribute name="width" type="xs:string" use="optional">
                 <xs:annotation>
                <xs:documentation>
                      Width of the column.
                </xs:documentation>
                </xs:annotation>
			</xs:attribute>
			<xs:attribute name="column" type="xs:string" use="optional">
                <xs:annotation>
                <xs:documentation>
                      Reference to a column. Used to connect the header with the column to allow re-ordering of the result set.
                </xs:documentation>
                </xs:annotation>
			</xs:attribute>
			<xs:attribute default="true" name="forceInline" type="xs:boolean" use="optional">
                <xs:annotation>
                <xs:documentation>
                      If true, the title is not allowed to wrap.
                </xs:documentation>
                </xs:annotation>
			</xs:attribute>
            <xs:attribute default="left" name="align" type="xs:string" use="optional">
                <xs:annotation>
                    <xs:documentation>
                        Specifies the horizontal alignment of the renderer's output within the column header.
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute default="middle" name="verticalAlign" type="xs:string" use="optional">
                <xs:annotation>
                    <xs:documentation>
                        Specifies the vertical alignment of the renderer's output within the column header.
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="color" type="xs:string" use="optional">
                <xs:annotation>
                    <xs:documentation>
                        Specifies the color of the renderer's output within the column header. E.g. use #FFFFFF for white and #000000 for black
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
		</xs:complexType>
	</xs:element>
<xs:element name="column">
		<xs:complexType>
			<xs:sequence>
				<xs:element maxOccurs="unbounded" minOccurs="0" ref="parameter"/> <!-- params for the column renderer - use also for "idReference", "versionReference" -->
				<xs:element maxOccurs="unbounded" minOccurs="0" ref="column.parameter"/> <!-- params for the column layouter -->
			</xs:sequence>
			<xs:attribute name="id" type="xs:string" use="required">
                <xs:annotation>
                <xs:documentation>
                    The (local) unique ID of the column.
                </xs:documentation>
                </xs:annotation>
			</xs:attribute>

			<xs:attribute name="template" type="xs:string" use="optional">
                <xs:annotation>
                <xs:documentation>
                     Renderer name which is used to create the HTML to display the specified attribute (see uiClassMapping.xml).
                </xs:documentation>
                </xs:annotation>
			</xs:attribute>

			<xs:attribute name="dataReference.idref" type="xs:string" use="optional">
                <xs:annotation>
                <xs:documentation>
                     Reference to an attribute or view column.
                </xs:documentation>
                </xs:annotation>
			</xs:attribute>

			<xs:attribute default="listColumn" name="columnTemplate" type="xs:string" use="optional">
                 <xs:annotation>
                <xs:documentation>
                    Name of the layouter used to create HTML for this column (see uiClassMapping.xml).
                </xs:documentation>
                </xs:annotation>
			</xs:attribute>
			<xs:attribute default="left" name="align" type="xs:string" use="optional">
                <xs:annotation>
                <xs:documentation>
                     Specifies the horizontal alignment of the renderer's output within the column.
                </xs:documentation>
                </xs:annotation>
			</xs:attribute>
			<xs:attribute default="top" name="verticalAlign" type="xs:string" use="optional">
                <xs:annotation>
                <xs:documentation>
                     Specifies the vertical alignment of the renderer's output within the column.
                </xs:documentation>
                </xs:annotation>
			</xs:attribute>
		</xs:complexType>
	</xs:element>
<xs:element name="column.parameter">
		<xs:complexType>
			<xs:attribute name="name" type="xs:string" use="required"/>
			<xs:attribute name="value" type="xs:string" use="required"/>
		</xs:complexType>
	</xs:element>
<xs:element name="listButtons">
         <xs:annotation>
        <xs:documentation>
            Defines the buttons which will be available on the top and bottom of lists.
        </xs:documentation>
        </xs:annotation>

		<xs:complexType>
			<xs:sequence>
            <xs:element maxOccurs="unbounded" minOccurs="0" ref="buttonReference"/>
        </xs:sequence>
		</xs:complexType>
	</xs:element>
<xs:element name="rowButtons">
         <xs:annotation>
        <xs:documentation>
            Defines the buttons which will be available in each row of the result set.
        </xs:documentation>
        </xs:annotation>

		<xs:complexType>
			<xs:sequence>
            <xs:element maxOccurs="unbounded" minOccurs="0" ref="buttonReference"/>
        </xs:sequence>
		</xs:complexType>
	</xs:element>
<xs:element name="evaluations">
        <xs:complexType>
            <xs:sequence>
                <xs:element maxOccurs="unbounded" minOccurs="0" ref="evaluation"/>
            </xs:sequence>
        </xs:complexType>
    </xs:element>
<xs:element name="evaluation">
        <xs:annotation>
            <xs:documentation>
                Property key implicitly defined: evaluation.{evaluation@id}.DBI,
                Help ID implicitly defined: ARCM_EVALUATION_{evaluation@id}.HLP
            </xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:sequence>
                <xs:element maxOccurs="unbounded" minOccurs="0" ref="parameter"/>
                <xs:element maxOccurs="1" minOccurs="0" ref="access.control"/>
                <xs:element maxOccurs="4" minOccurs="0" ref="simpleFilterRow"/>
                <xs:element maxOccurs="unbounded" minOccurs="0" ref="extendedFilterRow"/>
                <xs:element maxOccurs="1" minOccurs="0" ref="statistic"/>
                <xs:element maxOccurs="1" minOccurs="0" ref="toolbarButtons"/>
            </xs:sequence>
            <xs:attribute name="id" type="xs:string" use="required"/>
            <xs:attribute name="type" type="xs:string" use="required"/>
            <xs:attribute name="definitionClass" type="xs:string" use="optional"/>
            <xs:attribute name="filter.idref" type="xs:string" use="required"/>
            <xs:attribute name="controlName" type="xs:string" use="required"/>
            <xs:attribute name="frame" type="xs:string" use="optional"/>
            <xs:attribute default="false" name="ignoreRoleRestriction" type="xs:boolean" use="optional"/>
        </xs:complexType>
    </xs:element>
<xs:element name="statistic">
        <xs:annotation>
            <xs:documentation>
                This element is used to configure an evaluation or statistics based on a
                hierarchical structure (tree).
            </xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:sequence>
                <xs:element maxOccurs="1" minOccurs="1" ref="statistic.tree"/>
                <xs:element maxOccurs="1" minOccurs="1" ref="statistic.data.filter"/>
                <xs:element maxOccurs="unbounded" minOccurs="1" ref="statistic.columns"/>
            </xs:sequence>
        </xs:complexType>
    </xs:element>
<xs:element name="access.control">
        <xs:annotation>
            <xs:documentation>
                The 'id' attribute must be a class alias defined in 'statisticClassMapping.xml'.
                The class must implement IEvaluationAccessControl.
                (It is recommended to extend the class BaseEvaluationAccessControl)
            </xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:sequence>
                <xs:element maxOccurs="unbounded" minOccurs="0" ref="parameter"/>
            </xs:sequence>
            <xs:attribute default="default" name="id" type="xs:string" use="optional">
                <xs:annotation>
                    <xs:documentation>
                        "id" must be defined in 'statisticClassMapping.xml'
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
        </xs:complexType>
    </xs:element>
<xs:element name="statistic.tree">
        <xs:annotation>
            <xs:documentation>
                Mandatory element used to assign a hierarchical structure (tree) to the evaluation.
                The class "StatisticHierarchyTreeProvider" is used by default.
                For supported parameters, refer to the JavaDoc of the class "StatisticHierarchyTreeProvider".

                The value of the 'id' attribute must be a class alias name of 'statisticTreeProvider' type mapping (defined in 'statisticClassMapping.xml').
                Must implement IStatisticTreeProvider.
            </xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:sequence>
                <xs:element maxOccurs="unbounded" minOccurs="0" ref="parameter"/>
            </xs:sequence>
            <xs:attribute default="default" name="id" type="xs:string" use="optional">
                <xs:annotation>
                    <xs:documentation>
                        The 'id' attribute must be a class alias defined in 'statisticClassMapping.xml' in
                        'statisticTreeProvider' type mapping. Class must implement IStatisticTreeProvider.
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
        </xs:complexType>
    </xs:element>
<xs:element name="statistic.data.filter">
        <xs:annotation>
            <xs:documentation>
                Mandatory element used to filter the data and/or the hierarchical structure of the evaluation.
                The class "BaseStatisticDataFilter" is used as default.
                Supported parameters of the class "BaseStatisticDataFilter": hierarchy_type
                (for details, see JavaDoc of class "BaseStatisticDataFilter")

                Value of the 'id' attribute must be a class alias name of 'statisticDataFilter' type mapping (defined in 'statisticClassMapping.xml').
                Must implement IStatisticDataFilter.
            </xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:sequence>
                <xs:element maxOccurs="unbounded" minOccurs="0" ref="parameter"/>
            </xs:sequence>
            <xs:attribute default="default" name="id" type="xs:string" use="optional"/>
        </xs:complexType>
    </xs:element>
<xs:element name="statistic.columns">
        <xs:annotation>
            <xs:documentation>
                A statistics must contain at least one column. This column contains the hierarchy
                (see XML element "statistic.column.tree").
            </xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:sequence>
                <xs:element maxOccurs="1" minOccurs="0" ref="statistic.data"/>
                <xs:element maxOccurs="1" minOccurs="0" ref="statistic.calculator"/>
                <xs:element maxOccurs="1" minOccurs="0" ref="statistic.link"/>
                <xs:element maxOccurs="1" minOccurs="1" ref="statistic.column.tree"/>
                <xs:choice maxOccurs="unbounded">
                    <xs:element maxOccurs="unbounded" minOccurs="0" ref="statistic.column.chart"/>
                    <xs:element maxOccurs="unbounded" minOccurs="0" ref="statistic.column.value"/>
                    <xs:element maxOccurs="unbounded" minOccurs="0" ref="statistic.columnGroup.enum"/>
                    <xs:element maxOccurs="unbounded" minOccurs="0" ref="statistic.columnGroup"/>
                    <xs:element maxOccurs="unbounded" minOccurs="0" ref="statistic.columnGroup.perCent"/>
                    <xs:element maxOccurs="unbounded" minOccurs="0" ref="statistic.columnGroup.dynamic"/>
                </xs:choice>
            </xs:sequence>
        </xs:complexType>
    </xs:element>
<xs:element name="statistic.columnGroup">
        <xs:complexType>
            <xs:sequence>
                <xs:element maxOccurs="1" minOccurs="0" ref="statistic.data"/>
                <xs:element maxOccurs="1" minOccurs="0" ref="statistic.calculator"/>
                <xs:element maxOccurs="1" minOccurs="0" ref="statistic.link"/>
                <xs:choice maxOccurs="unbounded">                
                    <xs:element maxOccurs="unbounded" minOccurs="0" ref="statistic.column.chart"/>
                    <xs:element maxOccurs="unbounded" minOccurs="0" ref="statistic.column.value"/>
                    <xs:element maxOccurs="unbounded" minOccurs="0" ref="statistic.columnGroup.enum"/>
                    <xs:element maxOccurs="unbounded" minOccurs="0" ref="statistic.columnGroup"/>
                    <xs:element maxOccurs="unbounded" minOccurs="0" ref="statistic.columnGroup.perCent"/>
                    <xs:element maxOccurs="unbounded" minOccurs="0" ref="statistic.columnGroup.dynamic"/>
                </xs:choice>
            </xs:sequence>
            <xs:attribute name="propertyKey" type="xs:string" use="optional">
                <xs:annotation>
                    <xs:documentation>
                        Title key of the group. If it is not defined, the group is not visible.
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="width" type="percentage" use="optional">
                <xs:annotation>
                    <xs:documentation>
                        Preferred width of the column group. If the columns of the group do not have  
                        a width attribute, the width will be equally split up among the columns of the group.
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
        </xs:complexType>
    </xs:element>
<xs:element name="statistic.columnGroup.perCent">
        <xs:annotation>
            <xs:documentation>                
                This element is used to display absolute and percentual values for non-enumeration values.
                A totals column and a pie chart is displayed by default. 
                
                See "statistic.columnGroup.enum" element to configure enumeration-based columns.
            </xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:sequence>
                <xs:element maxOccurs="unbounded" minOccurs="1" ref="statistic.column.value"/>
            </xs:sequence>
            <xs:attribute name="allPropertyKey" type="xs:string" use="optional">
                <xs:annotation>
                    <xs:documentation>
                        The totals column has the title "Total" by default. You can overwrite this here.
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute default="true" name="coloredHeader" type="xs:boolean" use="optional">
                <xs:annotation>
                    <xs:documentation>
                        If "true", the column headers are displayed in the colors defined at the enumeration.
                         (Brightness and saturation of the color are slightly reduced for the header).
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="chart.idref" type="xs:string" use="optional">
                <xs:annotation>
                    <xs:documentation>
                        Must be an "id" from "evaluations_*.xml".
                        ("statisticPieChart" may be used to display a pie chart)
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute default="none" name="link.type" use="optional">
                <xs:simpleType>
                    <xs:restriction base="xs:string">
                        <xs:enumeration value="evaluation"/>
                        <xs:enumeration value="form"/>
                        <xs:enumeration value="list"/>
                        <xs:enumeration value="none"/>
                    </xs:restriction>
                </xs:simpleType>
            </xs:attribute>
            <xs:attribute name="link.idref" type="xs:string" use="optional">
                <xs:annotation>
                    <xs:documentation>
                        Depending on link.type, the link.idref must be a valid 'id' of forms*.xml,
                        lists*.xml or evaluations*.xml.
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="width" type="percentage" use="optional">
                <xs:annotation>
                    <xs:documentation>
                        Preferred width of the column group. If the columns of the group do not have  
                        a width attribute, the width will be equally split up among the columns of the group.
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
        </xs:complexType>
        
    </xs:element>
<xs:element name="statistic.columnGroup.dynamic">
        <xs:annotation>
            <xs:documentation>                
                This element is used to display dynamic columns, create a in IStatisticColumnBuilder implementation.                 
            </xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:sequence>
                <xs:element maxOccurs="1" minOccurs="0" ref="statistic.data"/>
                <xs:element maxOccurs="1" minOccurs="0" ref="statistic.calculator"/>
                <!--<xs:element ref="statistic.link" minOccurs="0" maxOccurs="1"/>-->
                <xs:element maxOccurs="1" minOccurs="1" ref="statistic.column.builder"/>

            </xs:sequence>
            <xs:attribute name="propertyKey" type="xs:string" use="optional">
                <xs:annotation>
                    <xs:documentation>
                        Title key of the group. If it is not defined, the group is not visible.
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>    
            <xs:attribute name="color" type="xs:string" use="optional">
                <xs:annotation>
                    <xs:documentation>
                        Background color of column header. Must be a value in HTML color format, e.g: #82D481.
                        (Brightness and saturation of the color are slightly reduced. The original color is used in the chart only.)
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="width" type="percentage" use="optional">
                <xs:annotation>
                    <xs:documentation>
                        Preferred width of the column group. If the columns of the group do not have
                        a width attribute, the width will be equally split up among the columns of the group.
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
        </xs:complexType>
    </xs:element>
<xs:element name="statistic.data">
        <xs:annotation>
            <xs:documentation>                               
                Element used to read out the data to be displayed from the data source and assign them to the appropriate columns.                
                Generally suitable "calculators" are "enum" and "value". For details, see JavaDoc of implementations.                 
                                
                Value of 'id' attribute must be a class alias name of 'statisticDataSource' type mapping (defined in 'statisticClassMapping.xml').
                Must implement IStatisticDataSource.
            </xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:sequence>
                <xs:element maxOccurs="unbounded" minOccurs="0" ref="parameter"/>
            </xs:sequence>
            <xs:attribute default="view" name="id" type="xs:string" use="optional">
                <xs:annotation>
                    <xs:documentation>
                        Alias name for a class that is used to create the calculation input.
                        "id" with class must be configured in statisticClassMapping.xml (should extend BaseViewStatisticDataSource)
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
        </xs:complexType>
    </xs:element>
<xs:element name="statistic.calculator">
        <xs:annotation>
            <xs:documentation>
                Element used to read out the data for display from the data source and to assign it to the relevant columns.
                The class "ViewBasedStatisticCalculator" is used as default.
                Supported parameters of the "IStatisticCalculator" class: viewId, viewOrderColumnId
                (For details, see JavaDoc or class "IStatisticCalculator").

                Value of the 'id' attribute must be a class alias name of 'statisticCalculator' type mapping (defined in 'statisticClassMapping.xml').
                Must implement IStatisticCalculator.
            </xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:sequence>
                <xs:element maxOccurs="unbounded" minOccurs="0" ref="parameter"/>
            </xs:sequence>
            <xs:attribute name="id" type="xs:string" use="required">
                <xs:annotation>
                    <xs:documentation>
                        Alias name for a class that is used to transform calculation input to IStatisticResultSet.
                        ID with class must be configured in statisticClassMapping.xml.
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
        </xs:complexType>
    </xs:element>
<xs:element name="statistic.link">
        <xs:complexType>
            <xs:sequence>
                <xs:element maxOccurs="unbounded" minOccurs="0" ref="parameter"/>
            </xs:sequence>
            <xs:attribute name="id" type="xs:string" use="optional">
                <xs:annotation>
                    <xs:documentation>
                        Alias name for a class that is used for linked columns.
                        "id" with class must be configured in statisticClassMapping.xml.
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
        </xs:complexType>
    </xs:element>
<xs:element name="statistic.column.builder">
        <xs:complexType>
            <xs:sequence>
                <xs:element maxOccurs="unbounded" minOccurs="0" ref="parameter"/>
            </xs:sequence>    
            <xs:attribute name="id" type="xs:string" use="optional">
                <xs:annotation>
                    <xs:documentation>
                        Alias name for a class that is used to build columns.
                        "id" with class must be configured in statisticClassMapping.xml.
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="template" type="xs:string" use="optional">
                <xs:annotation>
                    <xs:documentation>
                        Used to overwrite the default renderer of the column.
                        Renderers are configured in "uiClassMappings.xml" in the XML element "columnRenderers".
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
        <!--   <xs:attribute name="link.type" use="optional" default="none">
                <xs:simpleType>
                    <xs:restriction base="xs:string">
                        <xs:enumeration value="evaluation" />
                        <xs:enumeration value="form" />
                        <xs:enumeration value="list" />
                        <xs:enumeration value="none" />
                    </xs:restriction>
                </xs:simpleType>
            </xs:attribute>
            <xs:attribute name="link.idref" type="xs:string" use="optional">
                <xs:annotation>
                    <xs:documentation>
                        Depending on link.type, the link.idref must be a valid 'id' of
                        forms*.xml, lists*.xml or evaluations*.xml.
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>-->
        </xs:complexType>
    </xs:element>
<xs:element name="statistic.columnGroup.enum">
        <xs:annotation>
            <xs:documentation>
                Used to display one column for each item of an enumeration. There is one column for each item by default. 
                Virtual items are used in the header to structure their "real" items.
                Items can be removed from the statistics using the "evaluationRelevant" attribute at the enumeration item.                 
            </xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:sequence>
                <xs:element maxOccurs="unbounded" minOccurs="0" ref="parameter"/>
                <xs:element maxOccurs="unbounded" minOccurs="0" ref="statistic.subColumns.enum"/>
            </xs:sequence>
            <xs:attribute name="enumeration.idref" type="xs:string" use="required">
                <xs:annotation>
                    <xs:documentation>
                        Enumeration ID of any enumerations*.xml.
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="propertyKey" type="xs:string" use="optional">
                <xs:annotation>
                    <xs:documentation>
                        Title key of the group. If a title is defined, all enumeration items have it as parent.
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="template" type="xs:string" use="optional">
                <xs:annotation>
                    <xs:documentation>
                        Used to overwrite the default renderer of the column.
                        Renderers are configured in "uiClassMappings.xml" in the XML element "columnRenderers".
                    </xs:documentation>
                </xs:annotation>  
            </xs:attribute>
            <xs:attribute default="true" name="coloredHeader" type="xs:boolean" use="optional">
                <xs:annotation>
                    <xs:documentation>
                        If the value is true, the column headers are displayed in the colors defined at the enumeration.
                        (Brightness and saturation of the color are slighty reduced for the header).
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute default="true" name="addPerCentColumn" type="xs:boolean" use="optional"/>
            <xs:attribute name="perCentColumnTemplate" type="xs:string" use="optional">
                <xs:annotation>
                    <xs:documentation>
                        Used to overwrite the default renderer of the percent column.
                        Renderers are configured in "uiClassMappings.xml" in the XML element "columnRenderers".
                    </xs:documentation>
                </xs:annotation>  
            </xs:attribute>
            <xs:attribute default="none" name="link.type" use="optional">
                <xs:simpleType>
                    <xs:restriction base="xs:string">
                        <xs:enumeration value="evaluation"/>
                        <xs:enumeration value="form"/>
                        <xs:enumeration value="list"/>
                        <xs:enumeration value="none"/>
                    </xs:restriction>
                </xs:simpleType>
            </xs:attribute>
            <xs:attribute name="link.idref" type="xs:string" use="optional">
                <xs:annotation>
                    <xs:documentation>
                        Depending on link.type, the link.idref must be a valid 'id' of
                        forms*.xml, lists*.xml or evaluations*.xml.
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="enumGroupChart.id" type="xs:string" use="optional">
                <xs:annotation>
                    <xs:documentation>
                        If any chart enumGroupChart.id is defined, a column with a chart icon
                        will be added left to the last enumeration item column.
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="enumGroupChart.propertyKey" type="xs:string" use="optional">
                <xs:annotation>
                    <xs:documentation>
                        if defined then this property key will used to render a localized header inside the chart.
                        If not set then the global property key evaluation.{evaluation@id}.DBI of the evaluation is used.
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="width" type="percentage" use="optional">
                <xs:annotation>
                    <xs:documentation>
                        Preferred width of the column group. If columns of the group do not have a 
                        width attribute, the width will be equally split among the columns of the group.
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
        </xs:complexType>
    </xs:element>
<xs:element name="statistic.subColumns.enum">
        <xs:annotation>
            <xs:documentation>
                Used to further divide an enumeration column. The additional subordinate columns 
                result from the items of the specified enumeration. 
            </xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:sequence>
                <xs:element maxOccurs="unbounded" minOccurs="1" ref="statistic.columnGroup.enum"/>
            </xs:sequence>
            <xs:attribute name="enumItem.idref" type="xs:string" use="required">
                <xs:annotation>
                    <xs:documentation>
                        Enumeration item whose columns are to be divided.
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
        </xs:complexType>
    </xs:element>
<xs:element name="statistic.column.value">
        <xs:complexType>
            <xs:sequence>
                <xs:element maxOccurs="unbounded" minOccurs="0" ref="parameter"/>
            </xs:sequence>
            <xs:attribute name="id" type="xs:string" use="optional">
                <xs:annotation>
                    <xs:documentation>
                        Unique "id" of the column. It is used, e.g., by "dependentColumn.id" to simply 
                        display a chart, if this column has a value.
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="dataReference" type="xs:string" use="optional">
                <xs:annotation>
                    <xs:documentation>
                        Can be used to access the data source when implementing the calculators.
                    </xs:documentation>
                </xs:annotation>  
            </xs:attribute>
            <xs:attribute name="template" type="xs:string" use="optional">
                <xs:annotation>
                    <xs:documentation>
                        Used to overwrite the default renderer of the column.
                        Renderers are configured in "uiClassMappings.xml" in the XML element "columnRenderers".
                    </xs:documentation>
                </xs:annotation>  
            </xs:attribute>
            <xs:attribute name="color" type="xs:string" use="optional">
                <xs:annotation>
                    <xs:documentation>
                        Background color of column header. Must be a value in HTML color format, e.g: #82D481.
                        (Brightness and saturation of the color are slightly reduced. The original color is used in the chart only.)
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="calculation" use="optional">
                <xs:annotation>
                    <xs:documentation>
                        Is only included, if "ValueColumnStatisticCalculator" is used as the calculator.
                        "count": The value of the column is raised by "1" for each value found in the data source. 
			"count_unique": The value of the column is raised by "1" for each different value found in the data source. 
                        "sum": All values of the data source are added (values of the data source must be of the "number" type).
                    </xs:documentation>
                </xs:annotation>
                <xs:simpleType>
                    <xs:restriction base="xs:string">                        
                        <xs:enumeration value="count"/>
						<xs:enumeration value="count_unique"/>
                        <xs:enumeration value="sum"/>
                    </xs:restriction>
                </xs:simpleType>
            </xs:attribute>
            <xs:attribute name="propertyKey" type="xs:string" use="optional">
                <xs:annotation>
                    <xs:documentation>
                        Column title
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute default="none" name="link.type" use="optional">
                <xs:simpleType>
                    <xs:restriction base="xs:string">
                        <xs:enumeration value="evaluation"/>
                        <xs:enumeration value="form"/>
                        <xs:enumeration value="list"/>
                        <xs:enumeration value="none"/>
                    </xs:restriction>
                </xs:simpleType>
            </xs:attribute>
            <xs:attribute name="link.idref" type="xs:string" use="optional">
                <xs:annotation>
                    <xs:documentation>
                        Depending on link.type, the link.idref must be a valid 'id' of
                        objectTypes*.xml, lists*.xml or evaluations*.xml.
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="width" type="percentage" use="optional">
                <xs:annotation>
                    <xs:documentation>
                        Preferred width of the column.
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>                   
             <xs:attribute name="showOnlyAt" use="optional">
                 <xs:annotation>
                     <xs:documentation>
                         Used to show the column only in HTML UI or in PDF/Excel REPORT.
                         By default, the column is displayed in HTML UI and in reports.  
                     </xs:documentation>
                 </xs:annotation>
                <xs:simpleType>
                    <xs:restriction base="xs:string">
                        <xs:enumeration value="UI"/>
                        <xs:enumeration value="REPORT"/>
                    </xs:restriction>
                </xs:simpleType>
            </xs:attribute>                
        </xs:complexType>
    </xs:element>
<xs:element name="statistic.column.tree">
        <xs:annotation>
            <xs:documentation>
                Used to configure the structure of the statistics.
            </xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:sequence>
                <xs:element maxOccurs="unbounded" minOccurs="0" ref="parameter"/>
            </xs:sequence>
            <xs:attribute name="template" type="xs:string" use="optional"> 
                <xs:annotation>
                    <xs:documentation>
                        Used to overwrite the default renderer of the column.
                        Renderers are configured in "uiClassMappings.xml" in the XML element "columnRenderers".
                    </xs:documentation>
                </xs:annotation>                
            </xs:attribute>
            <xs:attribute name="linkedNodeTypes" type="xs:string" use="optional">
                <xs:annotation>
                    <xs:documentation>
                        List seperated by commas containing object types (e.g., "AUDITSTEP, USERGROUP") 
                        A tree node of a listed type will be displayed automatically as a link that
                        opens the corresponding object in a popup window.
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="width" type="percentage" use="optional">
                <xs:annotation>
                    <xs:documentation>
                        Preferred width of the column. 
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="maxWidth" type="xs:integer" use="optional">
                <xs:annotation>
                    <xs:documentation>
                        The node name displayed is cut according to the specified length (in pixel) and
                        supplemented with "...".
                        Can be used to avoid that very long node names "spoil" the layout.
                    </xs:documentation>
                </xs:annotation>     
            </xs:attribute>
        </xs:complexType>
    </xs:element>
<xs:element name="statistic.column.chart">
        <xs:complexType>
            <xs:sequence>
                <xs:element maxOccurs="unbounded" minOccurs="0" ref="parameter"/>
            </xs:sequence>
            <xs:attribute name="dependentColumn.id" type="xs:string" use="required">
                <xs:annotation>
                    <xs:documentation>
                        The chart is only active, if dependentColumn has a value (value != null)
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="id" type="xs:string" use="optional"/>
            <xs:attribute name="template" type="xs:string" use="optional">
                <xs:annotation>
                    <xs:documentation>
                        Used to overwrite the default renderer of the column.
                        Renderers are configured in "uiClassMappings.xml" in the XML element "columnRenderers".
                    </xs:documentation>
                </xs:annotation>  
            </xs:attribute>
            <xs:attribute name="reportSelectionKey" type="xs:string" use="optional">
                <xs:annotation>
                    <xs:documentation>
                        Key used for report details selection dialog
                        If no key is defined, the value of the 'propertyKey' attribute is used.
                        If 'reportSelectionKey' and 'propertyKey' are not defined,
                        the property key of the referenced chart ('chart.idref') is used.
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="propertyKey" type="xs:string" use="optional">
                <xs:annotation>
                    <xs:documentation>
                        If no key is defined, the column will not be displayed in the header.
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="chart.idref" type="xs:string" use="required"/>
            <xs:attribute name="chart.icon" type="xs:string" use="required">
                <xs:annotation>
                    <xs:documentation>
                        in case of attribute value is only an image, the default path "iconlib/icons/content/" will be used
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="chart.propertyKey" type="xs:string" use="optional">
                <xs:annotation>
                    <xs:documentation>
                        if defined then this property key will used to render a localized header inside the chart.
                        If not set then the global property key evaluation.{evaluation@id}.DBI of the evaluation is used.
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="width" type="percentage" use="optional">
                <xs:annotation>
                    <xs:documentation>
                        the preferred width of the column
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
        </xs:complexType>
    </xs:element>
<xs:element name="toolbarButtons">
        <xs:complexType>
            <xs:sequence>
                <xs:element maxOccurs="unbounded" minOccurs="0" ref="buttonReference"/>
            </xs:sequence>
        </xs:complexType>
    </xs:element>
<xs:simpleType name="percentage">
        <xs:restriction base="xs:string">
            <xs:pattern value="((100)|([0-9][0-9]?))(\.[0-9][0-9]?)?%"/>
        </xs:restriction>
    </xs:simpleType>
<xs:complexType name="LicensedElement">
		<xs:attribute name="id" type="xs:string" use="required">
            <xs:annotation>
            <xs:documentation>
                The (local) unique ID of the element.
            </xs:documentation>
            </xs:annotation>
		</xs:attribute>
		<xs:attribute name="propertyKey" type="xs:string" use="required">
            <xs:annotation>
            <xs:documentation>
                PropertyKey which is used to create the title of the tab.
            </xs:documentation>
            </xs:annotation>
		</xs:attribute>
		<xs:attribute name="action" type="xs:string" use="optional">
            <xs:annotation>
            <xs:documentation>
                Url which is called when switch to the tab
            </xs:documentation>
            </xs:annotation>
		</xs:attribute>
		<xs:attribute name="image" type="xs:string" use="optional">
            <xs:annotation>
            <xs:documentation>
                Deprecated, not used anymore
            </xs:documentation>
            </xs:annotation>
		</xs:attribute>
		<xs:attribute name="licensedComponentId" type="xs:string" use="optional">
            <xs:annotation>
            <xs:documentation>
                Comma-separated list of licensedComponentIds, at least one of these are necessary to display the tab in the UI.
            </xs:documentation>
            </xs:annotation>
		</xs:attribute>
		<xs:attribute name="roles" type="xs:string" use="optional">
            <xs:annotation>
            <xs:documentation>
                Comma-separated list of roles, at least one of these are necessary to display the tab in the UI.
            </xs:documentation>
            </xs:annotation>
		</xs:attribute>
        <xs:attribute name="rights" type="xs:string" use="optional">
            <xs:annotation>
                <xs:documentation>
                    Comma-separated list of rights, at least one of these are necessary to display the tab in the UI.
                </xs:documentation>
            </xs:annotation>
        </xs:attribute>
		<xs:attribute name="objectType" type="xs:string" use="optional">
            <xs:annotation>
            <xs:documentation>
                The main object type on the tab. At least one of the licensed-component(s) of this type must be available to display the tab in the UI.
                Value of attribute 'licensedComponentId' is checked additionally. 
            </xs:documentation>
            </xs:annotation>
		</xs:attribute>
		<xs:attribute name="restrictionValue" type="xs:string" use="optional">
            <xs:annotation>
            <xs:documentation>
                Values (comma-separated) making the tab visible.
                Used in connection with tabMapping.restrictionAttributeId.
            </xs:documentation>
            </xs:annotation>
		</xs:attribute>
	</xs:complexType>
<xs:element name="tTab">
        <xs:annotation>
        <xs:documentation>
            Definition of a single tab.
        </xs:documentation>
        </xs:annotation>

		<xs:complexType>
			<xs:complexContent>
				<xs:extension base="LicensedElement">
					<xs:sequence>
						<xs:element maxOccurs="unbounded" minOccurs="0" ref="tSubTab"/>
					</xs:sequence>
					<xs:attribute default="-1" name="page" type="xs:integer" use="optional">
                        <xs:annotation>
                        <xs:documentation>
                            Page index number as definied in forms.xml.
                        </xs:documentation>
                        </xs:annotation>
					</xs:attribute>
					<xs:attribute name="access" type="xs:string" use="optional">
                        <xs:annotation>
                        <xs:documentation>
                            Used to restrict access to the tab. Possible values are: 'persistent'.
                            'persistent' means that the tab can only be accessed, if the object is persistent and not dirty.
                        </xs:documentation>
                        </xs:annotation>
					</xs:attribute>
				</xs:extension>
			</xs:complexContent>
		</xs:complexType>
	</xs:element>
<xs:element name="tSubTab" type="LicensedElement"/>
<xs:element name="tabMappings">
		<xs:complexType>
			<xs:sequence>
				<xs:element maxOccurs="unbounded" ref="tabMapping"/>
			</xs:sequence>
		</xs:complexType>
	</xs:element>
<xs:element name="tabMapping">
        <xs:annotation>
        <xs:documentation>
            Root element to define the tabs for an object type.
        </xs:documentation>
        </xs:annotation>

		<xs:complexType>
			<xs:sequence>
				<xs:element maxOccurs="unbounded" minOccurs="0" ref="tTab"/>
			</xs:sequence>
			<xs:attribute name="id" type="xs:string" use="required">
                <xs:annotation>
                <xs:documentation>
                    The (global) unique ID of the tabMapping.
                </xs:documentation>
                </xs:annotation>
			</xs:attribute>
			<xs:attribute name="frame" type="xs:string" use="optional">
                <xs:annotation>
                <xs:documentation>
                    HTML Frame wherein the tabs are placed.
                </xs:documentation>
                </xs:annotation>
			</xs:attribute>
			<xs:attribute default="button.object.previous.BTN" name="previousPropertyKey" type="xs:string" use="optional"/>
			<xs:attribute default="button.object.next.BTN" name="nextPropertyKey" type="xs:string" use="optional"/>
			<xs:attribute name="restrictionAttributeId" type="xs:string" use="optional">
                <xs:annotation>
                <xs:documentation>
                    Used to show/hide tabs depending on the attribute value of the current object.
                </xs:documentation>
                </xs:annotation>
			</xs:attribute>
		</xs:complexType>
	</xs:element>
<xs:element name="actionCommands">
		<xs:complexType>
			<xs:sequence>
				<xs:element minOccurs="0" ref="commandIds"/>
				<xs:element minOccurs="0" ref="objectTypeCommands"/>
				<xs:element minOccurs="0" ref="listCommands"/>
                <xs:element minOccurs="0" ref="evaluationCommands"/>
				<xs:element minOccurs="0" ref="jobCommands"/>
				<xs:element minOccurs="0" ref="dialogCommands"/>
			</xs:sequence>
		</xs:complexType>
	</xs:element>
<xs:complexType name="AbstractCommandSet">
		<xs:sequence>
			<xs:element maxOccurs="unbounded" minOccurs="0" ref="actionCommand"/>
		</xs:sequence>
		<xs:attribute name="name" type="xs:string" use="required"/>
        <xs:attribute name="type" type="xs:string" use="optional"/>
        <xs:attribute name="clsName" type="xs:string" use="optional"/>
	</xs:complexType>
<xs:element name="commandIds">
		<xs:complexType>
			<xs:sequence>
				<xs:element maxOccurs="unbounded" ref="commandId"/>
			</xs:sequence>
		</xs:complexType>
	</xs:element>
<xs:element name="commandId">
		<xs:complexType>
			<xs:attribute name="id" type="xs:string" use="required"/>
			<xs:attribute name="description" type="xs:string" use="optional"/>
		</xs:complexType>
	</xs:element>
<xs:element name="commandSet" type="AbstractCommandSet"/>
<xs:element name="objectTypeCommands">
		<xs:complexType>
			<xs:sequence>
				<xs:element maxOccurs="unbounded" ref="commandSet"/>
			</xs:sequence>
		</xs:complexType>
	</xs:element>
<xs:element name="listCommands">
		<xs:complexType>
			<xs:sequence>
				<xs:element maxOccurs="unbounded" ref="commandSet"/>
			</xs:sequence>
		</xs:complexType>
	</xs:element>
<xs:element name="jobCommands">
		<xs:complexType>
			<xs:sequence>
				<xs:element maxOccurs="unbounded" ref="commandSet"/>
			</xs:sequence>
		</xs:complexType>
	</xs:element>
<xs:element name="dialogCommands">
		<xs:complexType>
			<xs:sequence>
				<xs:element maxOccurs="unbounded" ref="commandSet"/>
			</xs:sequence>
		</xs:complexType>
	</xs:element>
<xs:element name="evaluationCommands">
		<xs:complexType>
			<xs:sequence>
				<xs:element maxOccurs="unbounded" ref="commandSet"/>
			</xs:sequence>
		</xs:complexType>
	</xs:element>
<xs:element name="actionCommand">
		<xs:complexType>
			<xs:attribute name="commandId" type="xs:string" use="required"/>
			<xs:attribute name="clsName" type="xs:string" use="required"/>
		</xs:complexType>
	</xs:element>
<xs:element name="offlineProcessing">
        <xs:complexType>
            <xs:sequence>
                <xs:element maxOccurs="unbounded" minOccurs="0" ref="offline-editable">
                    <xs:annotation>
                        <xs:documentation>
                            Defines which AppObjs can be edited offline by which roles.
                        </xs:documentation>
                    </xs:annotation>
                </xs:element>
                <xs:element maxOccurs="unbounded" minOccurs="0" ref="offline-operators">
                    <xs:annotation>
                        <xs:documentation>
                            Defines the offline operators which can check out and check in offline documents on behalf of other roles.
                        </xs:documentation>
                    </xs:annotation>
                </xs:element>
                <xs:element maxOccurs="unbounded" minOccurs="0" ref="processors">
                    <xs:annotation>
                        <xs:documentation>
                            Implementations of ICheckOutProcessor and ICheckInProcessor are used to create and read the files that are used for offline processing.
                        </xs:documentation>
                    </xs:annotation>
                </xs:element>
                <xs:element maxOccurs="unbounded" minOccurs="0" ref="processingBehaviour">
                    <xs:annotation>
                        <xs:documentation>
                            Behaviour controller classes are used 
                                * to handle decision, if the object can be processed offline in it's current state.
                                * to get all additional objects (OVID) to be locked, if an object is checked out for offline editing (see IOfflineProcessingBehaviour JavaDoc for details).
                        </xs:documentation>
                    </xs:annotation>
                </xs:element>
            </xs:sequence>
            <xs:attribute name="configuration" type="xs:string"/>
        </xs:complexType>
    </xs:element>
<xs:element name="offline-editable">
        <xs:complexType>
            <xs:sequence>
                <xs:element maxOccurs="unbounded" minOccurs="0" ref="object-type"/>
            </xs:sequence>
        </xs:complexType>
    </xs:element>
<xs:element name="offline-operators">
        <xs:complexType>
            <xs:sequence>
                <xs:element maxOccurs="unbounded" minOccurs="0" ref="operator-role"/>
            </xs:sequence>
        </xs:complexType>
    </xs:element>
<xs:element name="operator-role">
        <xs:complexType>
            <xs:sequence>
                <xs:element maxOccurs="unbounded" minOccurs="0" ref="object-type"/>
            </xs:sequence>
            <xs:attribute name="id" type="xs:string" use="optional"/>
        </xs:complexType>
    </xs:element>
<xs:element name="object-type">
        <xs:complexType>
            <xs:sequence>
                <xs:element maxOccurs="unbounded" minOccurs="0" ref="object-type-role"/>
            </xs:sequence>
            <xs:attribute name="name" type="xs:string" use="optional"/>
        </xs:complexType>
    </xs:element>
<xs:element name="object-type-role">
        <xs:complexType>
            <xs:attribute name="id" type="xs:string" use="optional"/>
        </xs:complexType>
    </xs:element>
<xs:element name="processors">
        <xs:complexType>
            <xs:sequence>
                <xs:element ref="checkOut"/>
                <xs:element ref="checkIn"/>
            </xs:sequence>
        </xs:complexType>
    </xs:element>
<xs:element name="checkOut">
        <xs:complexType>
            <xs:sequence>
                <xs:element maxOccurs="unbounded" ref="checkOutProcessor"/>
            </xs:sequence>
        </xs:complexType>
    </xs:element>
<xs:element name="checkIn">
        <xs:complexType>
            <xs:sequence>
                <xs:element maxOccurs="unbounded" ref="checkInProcessor"/>
            </xs:sequence>
        </xs:complexType>
    </xs:element>
<xs:element name="checkOutProcessor">
        <xs:annotation>
            <xs:documentation>
                The attributes 'format' and 'clsName' are mandatory, 'objectType' is optional.
                Processors without specified objectType or with objectType 'common' are used as defaults.
            </xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:attribute name="format" type="xs:string"/>
            <xs:attribute default="common" name="objectType" type="xs:string" use="optional"/>
            <xs:attribute name="clsName" type="xs:string">
                <xs:annotation>
                    <xs:documentation>
                        Must be the complete class name.
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
        </xs:complexType>
    </xs:element>
<xs:element name="checkInProcessor">
        <xs:annotation>
            <xs:documentation>
                The attributes 'format' and 'clsName' are mandatory, 'objectType' is optional.
                Processors without specified objectType or with objectType 'common' are used as defaults.
            </xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:attribute name="format" type="xs:string"/>
            <xs:attribute default="common" name="objectType" type="xs:string" use="optional"/>
            <xs:attribute name="clsName" type="xs:string">
                <xs:annotation>
                    <xs:documentation>
                        Must be the complete class name.
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
        </xs:complexType>
    </xs:element>
<xs:element name="processingBehaviour">
        <xs:complexType>
            <xs:sequence>
                <xs:element maxOccurs="unbounded" minOccurs="0" ref="controller"/>
            </xs:sequence>
        </xs:complexType>
    </xs:element>
<xs:element name="controller">
        <xs:complexType>
            <xs:attribute name="objectType" type="xs:string"/>
            <xs:attribute name="clsName" type="xs:string">
                <xs:annotation>
                    <xs:documentation>
                        Must be the complete class name.
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
        </xs:complexType>
    </xs:element>
<xs:element name="arisreports">
		<xs:complexType>
			<xs:sequence>
                <xs:element maxOccurs="unbounded" minOccurs="0" ref="arisreportstyle"/>
                <xs:element maxOccurs="unbounded" minOccurs="0" ref="arisreport"/>
                <xs:element maxOccurs="unbounded" minOccurs="0" ref="arisreportselection"/>
            </xs:sequence>
		</xs:complexType>
	</xs:element>
<xs:element name="arisreportstyle">
        <xs:complexType>
            <xs:attribute name="styleID" type="xs:string" use="required"/>
            <xs:attribute name="font" type="xs:string" use="required">
                <xs:annotation>
                    <xs:documentation>
                        Font name of a font registered at the current system.
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="fontsize" type="xs:integer" use="required"/>
            <xs:attribute name="fontcolor" type="xs:string" use="required">
                <xs:annotation>
                    <xs:documentation>
                        The color can be specified 
                        - using a constant of IColorConstants; the color string then is "C_" + color constant name.
                        - using the color hex notation beginning with "0x".
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="backgroundcolor" type="xs:string" use="required">
                <xs:annotation>
                    <xs:documentation>
                        The color can be specified 
                        - using a constant of IColorConstants; the color string then is "C_" + color constant name.
                        - using the color hex notation beginning with "0x".
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute default="false" name="bold" type="xs:boolean" use="optional"/>
            <xs:attribute default="false" name="italic" type="xs:boolean" use="optional"/>
            <xs:attribute default="false" name="noborder" type="xs:boolean" use="optional">
                <xs:annotation>
                    <xs:documentation>
                        Disables all borders. Overrides the other border attribute settings.
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute default="false" name="nolinebreak" type="xs:boolean" use="optional">
                <xs:annotation>
                    <xs:documentation>
                        Removes all line breaks when String values are rendered.
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute default="left" name="textalignment" use="optional">
				<xs:simpleType>
					<xs:restriction base="xs:string">
						<xs:enumeration value="left"/>
						<xs:enumeration value="right"/>
                        <xs:enumeration value="center"/>
                    </xs:restriction>
				</xs:simpleType>
			</xs:attribute>
            <xs:attribute default="bottom" name="verticaltextalignment" use="optional">
				<xs:simpleType>
					<xs:restriction base="xs:string">
						<xs:enumeration value="top"/>
						<xs:enumeration value="bottom"/>
                        <xs:enumeration value="middle"/>
                    </xs:restriction>
				</xs:simpleType>
			</xs:attribute>
            <xs:attribute default="thin" name="leftborder" use="optional">
				<xs:simpleType>
					<xs:restriction base="xs:string">
						<xs:enumeration value="none"/>
						<xs:enumeration value="thin"/>
						<xs:enumeration value="medium"/>
						<xs:enumeration value="thick"/>
					</xs:restriction>
				</xs:simpleType>
			</xs:attribute>
				<xs:attribute default="thin" name="rightborder" use="optional">
				<xs:simpleType>
					<xs:restriction base="xs:string">
						<xs:enumeration value="none"/>
						<xs:enumeration value="thin"/>
						<xs:enumeration value="medium"/>
						<xs:enumeration value="thick"/>
					</xs:restriction>
				</xs:simpleType>
			</xs:attribute>
			<xs:attribute default="thin" name="topborder" use="optional">
				<xs:simpleType>
					<xs:restriction base="xs:string">
						<xs:enumeration value="none"/>
						<xs:enumeration value="thin"/>
						<xs:enumeration value="medium"/>
						<xs:enumeration value="thick"/>
					</xs:restriction>
				</xs:simpleType>
			</xs:attribute>
			<xs:attribute default="thin" name="bottomborder" use="optional">
				<xs:simpleType>
					<xs:restriction base="xs:string">
						<xs:enumeration value="none"/>
						<xs:enumeration value="thin"/>
						<xs:enumeration value="medium"/>
						<xs:enumeration value="thick"/>
					</xs:restriction>
				</xs:simpleType>
			</xs:attribute>
        </xs:complexType>
    </xs:element>
<xs:element name="arisreport">
        <xs:annotation>
            <xs:documentation>
                Represents a static report definition.
                Whenever a form or list report is created and no static report definition exists, a default report definition will be created and stored in 'reports_dynamicreports.xml'.
            </xs:documentation>
        </xs:annotation>
		<xs:complexType>
			<xs:sequence>
                <xs:element maxOccurs="unbounded" minOccurs="0" ref="arisreportpattern"/>
                <xs:element maxOccurs="unbounded" minOccurs="0" ref="arisreportsection"/>
				<xs:element maxOccurs="unbounded" minOccurs="0" ref="arissubreport"/>
			</xs:sequence>
			<xs:attribute name="reportID" type="xs:string" use="required">
                <xs:annotation>
                    <xs:documentation>
                        Standard ARCM uses default report IDs for forms and lists by the following conventions:
                        - Forms: Object type ID of the form in upper case (Example: 'RISK').
                        - Lists: List ID (Example: 'risk').
                    </xs:documentation>
                </xs:annotation>
			</xs:attribute>
            <xs:attribute name="format" use="required">
				<xs:simpleType>
					<xs:restriction base="xs:string">
						<xs:enumeration value="PDF"/>
						<xs:enumeration value="EXCEL"/>
					</xs:restriction>
				</xs:simpleType>
			</xs:attribute>
			<xs:attribute name="datasourceType" use="required">
                <xs:annotation>
                    <xs:documentation>
                        Specifies the kind of data source to be used for resolving the dataReferences.
                    </xs:documentation>
                </xs:annotation>
				<xs:simpleType>
					<xs:restriction base="xs:string">
						<xs:enumeration value="APPOBJ">
                            <xs:annotation>
                                <xs:documentation>
                                    Linked data source must be an ArisReportAppObjSerializer.
                                    All default form reports have exactly one APPOBJ data source which contains the form AppObj.
                                </xs:documentation>
                            </xs:annotation>
						</xs:enumeration>
						<xs:enumeration value="VIEW">
                            <xs:annotation>
                                <xs:documentation>
                                    Linked data source must be an ArisReportViewSerializer.
                                    All default list reports have exactly one VIEW data source which contains a copy of the original list view where CLOBs are enabled and paging is disabled.
                                </xs:documentation>
                            </xs:annotation>
						</xs:enumeration>
						<xs:enumeration value="STATISTIC">
                            <xs:annotation>
                                <xs:documentation>
                                    This value is only used internally by the report engine. Standard configuration does not use static report definitions for statistic reports.
                                </xs:documentation>
                            </xs:annotation>
						</xs:enumeration>
                        <xs:enumeration value="CHART">
                            <xs:annotation>
                                <xs:documentation>
                                    This value is only used internally by the report engine. Standard configuration does not use static report definitions for chart reports.
                                </xs:documentation>
                            </xs:annotation>
                        </xs:enumeration>
                        <xs:enumeration value="PATTERN">
                            <xs:annotation>
                                <xs:documentation>
                                    Using this value declares a report definition as a pattern. Patterns use simple parameter HashMaps as data source.
                                </xs:documentation>
                            </xs:annotation>
                        </xs:enumeration>
                    </xs:restriction>
				</xs:simpleType>
			</xs:attribute>
			<xs:attribute name="datasourceID" type="xs:string" use="required">
                <xs:annotation>
                    <xs:documentation>
                        Denotes the main data source.
                    </xs:documentation>
                </xs:annotation>
			</xs:attribute>
            <xs:attribute default="false" name="async" type="xs:boolean" use="optional">
                <xs:annotation>
                    <xs:documentation>
                        If 'true', the report is executed as job on the master server and not on the client.
                        The standard executes all reports on the respective client.
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute default="false" name="indexEnabled" type="xs:boolean" use="optional">
                <xs:annotation>
                    <xs:documentation>
                        If the report definition uses sub data sources (see reporting guide for details), activating this option stores an index for each loaded sub data source.
                        The index value can be accessed by the special dataReference "$index".
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute default="false" name="processSubreportsFirst" type="xs:boolean" use="optional">
                <xs:annotation>
                    <xs:documentation>
                        If the report definition consists of both, sub reports and own report table definitions, this flag decides whether the sub reports are processed before the tables or vice versa.
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute default="true" name="discardMainDatasourceAfterUse" type="xs:boolean" use="optional">
                <xs:annotation>
                    <xs:documentation>
                        If the sub report definition uses its own sub reports again, this flag is used to discard the main data source (of these sub sub datasources) and free memory space.
                        It overrides the 'discardMainDatasourceAfterUse' attribute value at the referenced report definition.
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
        </xs:complexType>
	</xs:element>
<xs:element name="arisreportsection">
        <xs:annotation>
            <xs:documentation>
                Starts a new section within the report document. Please note, that the primary use of sections means to define logical parts of the report.
            </xs:documentation>
        </xs:annotation>
		<xs:complexType>
			<xs:sequence>
				<xs:element maxOccurs="unbounded" minOccurs="0" ref="arisreportpattern"/>
				<xs:element maxOccurs="unbounded" minOccurs="0" ref="arisreportautocomponent"/>
                <xs:element maxOccurs="unbounded" minOccurs="0" ref="arisreporttable"/>
				<xs:element maxOccurs="unbounded" minOccurs="0" ref="arisreportoutput"/>
            </xs:sequence>
			<xs:attribute name="datasourceID" type="xs:string" use="optional">
                <xs:annotation>
                    <xs:documentation>
                        If the report definition uses several data sources, the desired data source can be referenced here.
                        If the report uses sub data sources, the attribute value defines the logical expression determining the sub data sources to be loaded (see reporting guide for details).
                        Using sub data sources for this section will execute its content creation for each single sub data source in sequence.
                    </xs:documentation>
                </xs:annotation>
			</xs:attribute>
			<xs:attribute default="false" name="newPage" type="xs:boolean" use="optional">
                <xs:annotation>
                    <xs:documentation>
                        If 'true', this section starts a new page in PDF reports. For EXCEL reports this flag is ignored.
                    </xs:documentation>
                </xs:annotation>
			</xs:attribute>
            <xs:attribute default="portrait" name="pageFormat" use="optional">
				<xs:simpleType>
					<xs:restriction base="xs:string">
						<xs:enumeration value="portrait"/>
						<xs:enumeration value="landscape"/>
                    </xs:restriction>
				</xs:simpleType>
			</xs:attribute>
            <xs:attribute default="false" name="dynamicContent" type="xs:boolean" use="optional">
                <xs:annotation>
                    <xs:documentation>
                        When this flag is set to 'true' and the data source is of the VIEW type, the report creation for the section is repeated for each row within the view result.
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="visibilityConstraint" type="xs:string" use="optional">
                <xs:annotation>
                    <xs:documentation>
                        Only used, if the data source is APPOBJ. The value must consist of one or more dataReferences (i.e. object attribute IDs), separated by '|'.
                        If at least one of these attributes is marked as invisible by the rule engine, the entire processing of this section is skipped.
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="componentRightConstraint" type="xs:string" use="optional">
                <xs:annotation>
                    <xs:documentation>
                        The value must consist of one or more component IDs (see LicensedComponent), separated by '|'.
                        If the data source is APPOBJ and the AppObj has a client sign, the user must have these component rights for the corresponding client.
                        In all other cases the user must have these rights in general.
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute default="false" name="indexEnabled" type="xs:boolean" use="optional">
                <xs:annotation>
                    <xs:documentation>
                        If the report definition uses sub data sources (see reporting guide for details), activating this option stores an index for each loaded sub data source.
                        The index value can be accessed by the special dataReference "$index".
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
        </xs:complexType>
	</xs:element>
<xs:element name="arisreportpattern">
        <xs:annotation>
            <xs:documentation>
                Includes a pattern into the current report. A pattern is a special sub report without a regular data source but with parameter values instead.
            </xs:documentation>
        </xs:annotation>
		<xs:complexType>
			<xs:attribute name="patternType" use="required">
                <xs:annotation>
                    <xs:documentation>
                        Specifies how to include the pattern into the resulting report document.
                    </xs:documentation>
                </xs:annotation>
				<xs:simpleType>
					<xs:restriction base="xs:string">
						<xs:enumeration value="simple">
                            <xs:annotation>
                                <xs:documentation>
                                    The pattern content is added at the beginning of this section.
                                </xs:documentation>
                            </xs:annotation>
						</xs:enumeration>
						<xs:enumeration value="pageheader">
                            <xs:annotation>
                                <xs:documentation>
                                    The pattern content is added at the header of each page. This option only works for PDF, EXCEL will ignore patterns of this type.
                                </xs:documentation>
                            </xs:annotation>
						</xs:enumeration>
						<xs:enumeration value="pagefooter">
                            <xs:annotation>
                                <xs:documentation>
                                    The pattern content is added at the footer of each page. This option only works for PDF, EXCEL will ignore patterns of this type.
                                </xs:documentation>
                            </xs:annotation>
						</xs:enumeration>
					</xs:restriction>
				</xs:simpleType>
			</xs:attribute>
			<xs:attribute name="patternID" type="xs:string" use="required">
                <xs:annotation>
                    <xs:documentation>
                        References the report definition which defines the pattern content. This report definition must have the data source type 'PATTERN'.
                    </xs:documentation>
                </xs:annotation>
			</xs:attribute>
            <xs:attribute name="patternParameters" type="xs:string" use="optional">
                <xs:annotation>
                    <xs:documentation>
                        Pattern parameters are separated by '|'. Each parameter has the form [key]=[value].
                        Within the pattern report definition, all dataReferences are matched against the specified parameter keys and the corresponding values are output.
                        If the value starts with '$', the value is parsed as a property key and localized.
                        Example: '$constant.true' as a pattern parameter will lead to output 'Yes' if Locale.ENGLISH is used.
                        If the value starts with '*', the rest of the value is parsed as a dataReference to the data source of the superior report. Then the dataReference is resolved and the resulting value is passed to the pattern.
                        Example: Using a risk as the data source and '*risk_id' as the pattern parameter will lead to an output like 'MyRisk ID 42'.
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
        </xs:complexType>
	</xs:element>
<xs:element name="arisreportautocomponent">
        <xs:annotation>
            <xs:documentation>
                Autocomponent references add certain report output to the report document. The kind of output is hardcoded and cannot be customized.
                In PDF reports the autocomponent content is added at the beginning of the including section. In EXCEL reports the autcomponent content is added as a separate sheet.
            </xs:documentation>
        </xs:annotation>
		<xs:complexType>
			<xs:attribute name="componentID" use="required">
                <xs:simpleType>
                    <xs:restriction base="xs:string">
                        <xs:enumeration value="contextinfo">
                            <xs:annotation>
                                <xs:documentation>
                                    This component adds the name of the executing user and the date of report execution.
                                </xs:documentation>
                            </xs:annotation>
                        </xs:enumeration>
                        <xs:enumeration value="filterinfo">
                            <xs:annotation>
                                <xs:documentation>
                                    This component adds the values of all filter elements which are not default values. It is used for lists and evaluations only.
                                </xs:documentation>
                            </xs:annotation>
                        </xs:enumeration>
                        <xs:enumeration value="offlineinfo">
                            <xs:annotation>
                                <xs:documentation>
                                    This component adds the offline processing information for an offline document. It is used for the EXCEL report definitions in offline processing only.
                                </xs:documentation>
                            </xs:annotation>
                        </xs:enumeration>
                        <xs:enumeration value="notifications">
                            <xs:annotation>
                                <xs:documentation>
                                    This value is only used internally by the report engine. It adds all evaluation notifications.
                                </xs:documentation>
                            </xs:annotation>
                        </xs:enumeration>
                    </xs:restriction>
                </xs:simpleType>
            </xs:attribute>
		</xs:complexType>
	</xs:element>
<xs:element name="arisreporttable">
        <xs:annotation>
            <xs:documentation>
                Starts a new table inside the report document. Tables can contain cells which in turn have an inner table as content.
                A top-level table will always start a new sheet inside an EXCEL report.
            </xs:documentation>
        </xs:annotation>
		<xs:complexType>
			<xs:sequence>
				<xs:element maxOccurs="unbounded" minOccurs="0" ref="arisreporttablerow"/>
			</xs:sequence>
			<xs:attribute name="datasourceID" type="xs:string" use="optional">
                <xs:annotation>
                    <xs:documentation>
                        If the report definition uses several data sources, the desired one can be referenced here.
                        If the report uses sub data sources, the attribute value defines the logical expression what sub data sources are to be loaded (see reporting guide for details).
                        Using sub data sources for this table will execute its content creation for each single sub data source in sequence.
                    </xs:documentation>
                </xs:annotation>
			</xs:attribute>
            <xs:attribute default="true" name="multipleDatasourcesAsListMode" type="xs:boolean" use="optional">
                <xs:annotation>
                    <xs:documentation>
                        This flag is only important if sub data sources are used.
                        If set to 'true' (default), the first table row is processed for all data sources, then the second table row and so on.
                        If set to 'false', all table rows are processed for the first data source, then for the second data source and so on.
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute default="false" name="bottomSpaceLine" type="xs:boolean" use="optional">
                <xs:annotation>
                    <xs:documentation>
                        If set to 'true' (default is 'false'), a space line is added to the document after the table.
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="visibilityConstraint" type="xs:string" use="optional">
                <xs:annotation>
                    <xs:documentation>
                        Only used, if the data source is APPOBJ. The value must consist of one or several dataReferences (i.e. object attribute IDs), separated by '|'.
                        If at least one of these attributes is marked invisible by the rule engine, the entire processing of this section is skipped.
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="componentRightConstraint" type="xs:string" use="optional">
                <xs:annotation>
                    <xs:documentation>
                        The value must consist of one or more component IDs (see LicensedComponent), separated by '|'.
                        If the data source is APPOBJ and the AppObj has a client sign, the user must have these component rights for the corresponding client.
                        In all other cases the user must have these rights in general.
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="tableNameText" type="xs:string" use="optional">
                <xs:annotation>
                    <xs:documentation>
                        Adds a table name as plain text. In PDF, the table name is added as centered text below the table, in EXCEL it is used as sheet name.
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="tableNameProperty" type="xs:string" use="optional">
                <xs:annotation>
                    <xs:documentation>
                        Adds a table name as localized property. In PDF, the table name is added as centered text below the table, in EXCEL it is used as sheet name.
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="tableNameDataReference" type="xs:string" use="optional">
                <xs:annotation>
                    <xs:documentation>
                        Adds a table name as resolved dataReference value. In PDF, the table name is added as centered text below the table, in EXCEL it is used as sheet name.
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute default="false" name="indexEnabled" type="xs:boolean" use="optional">
                <xs:annotation>
                    <xs:documentation>
                        If the report definition uses sub data sources (see reporting guide for details), activating this option stores an index for each loaded sub data source.
                        The index value can be accessed by the special dataReference "$index".
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
        </xs:complexType>
	</xs:element>
<xs:element name="arisreporttablerow">
		<xs:complexType>
			<xs:sequence>
				<xs:element maxOccurs="unbounded" minOccurs="0" ref="arisreporttablecell"/>
			</xs:sequence>
			<xs:attribute default="false" name="dynamicContent" type="xs:boolean" use="optional">
                <xs:annotation>
                    <xs:documentation>
                        When this flag is set to 'true' and the data source is of the VIEW type, the report creation for the section is repeated for each row inside the view result.
                    </xs:documentation>
                </xs:annotation>
			</xs:attribute>
            <xs:attribute name="visibilityConstraint" type="xs:string" use="optional">
                <xs:annotation>
                    <xs:documentation>
                        Only used, if the data source is APPOBJ. The value must consist of one or several dataReferences (i.e. object attribute IDs), separated by '|'.
                        If at least one of these attributes is marked invisible by the rule engine, the entire processing of this section is skipped.
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="componentRightConstraint" type="xs:string" use="optional">
                <xs:annotation>
                    <xs:documentation>
                        The value must consist of one or more component IDs (see LicensedComponent), separated by '|'.
                        If the data source is APPOBJ and the AppObj has a client sign, the user must have these component rights for the corresponding client.
                        In all other cases the user must have these rights in general.
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
        </xs:complexType>
	</xs:element>
<xs:element name="arisreporttablecell">
		<xs:complexType>
			<xs:sequence>
				<xs:element maxOccurs="unbounded" minOccurs="0" ref="arisreportoutput"/>
				<xs:element maxOccurs="1" minOccurs="0" ref="arisreporttable">
                    <xs:annotation>
                        <xs:documentation>
                            An inner table is only processed, if no output elements are defined within this cell and the attributes 'dataReference', 'propertyKey' and 'outputText' are not set.
                        </xs:documentation>
                    </xs:annotation>
				</xs:element>
			</xs:sequence>
            <xs:attribute name="dataReference" type="xs:string" use="optional">
                <xs:annotation>
                    <xs:documentation>
                        In case of APPOBJ data sources, the dataReference must correspond to an AppObj attribute.
                        If the AppObj is loaded as sub data source from another main AppObj, it can also correspond to a connection attribute between these two AppObjs.
                        In case of VIEW data sources, the dataReference must correspond to a view column.
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <!-- only usable as simple datasource reference, sub datasource notifications are ignored -->
            <xs:attribute name="datasourceID" type="xs:string" use="optional">
                <xs:annotation>
                    <xs:documentation>
                        If the report definition uses several data sources, the desired one can be referenced here.
                        Unlike section and table elements, a cell can only use simple data source references and no sub data source notifications.
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute default="true" name="renderAsText" type="xs:boolean" use="optional">
                <xs:annotation>
                    <xs:documentation>
                        This flag adds the value of the resolved dataReference as text to the report document, depending on the chosen renderer.
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute default="false" name="renderAsIcon" type="xs:boolean" use="optional">
                <xs:annotation>
                    <xs:documentation>
                        This flag adds the value of the resolved dataReference as icon to the report document, depending on the chosen renderer.
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute default="false" name="renderAsChart" type="xs:boolean" use="optional">
                <xs:annotation>
                    <xs:documentation>
                        This value is only used internally by the report engine.
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="rendererID" type="xs:string" use="optional">
                <xs:annotation>
                    <xs:documentation>
                        The renderer to be used to change the original text or icon output of the resolved dataReference.
                        The parameter value must match a mapping in the uiClassMappings under the category 'reportRenderers' (see reporting guide for details).
                        If no rendererID is provided, the appropriate default renderer mapping is used.
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="rendererParameter" type="xs:string" use="optional">
                <xs:annotation>
                    <xs:documentation>
                        Parameters of the chosen renderer. Please refer to the renderer documentation to find out which parameters are accepted.
                        Renderer parameters are separated by '|'. Each single parameter has the form [key]=[value].
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="propertyKey" type="xs:string" use="optional">
                <xs:annotation>
                    <xs:documentation>
                        Adds the value of the localized propertyKey as text to the report document.
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="outputText" type="xs:string" use="optional">
                <xs:annotation>
                    <xs:documentation>
                        Adds plain text to the report document.
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute default="0" name="relativeWidth" type="xs:float" use="optional">
                <xs:annotation>
                    <xs:documentation>
                        Use this parameter for PDF reports only.
                        Relative width this cell shall have within the current row. Minimum is 0, maximum is 100.
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
			<xs:attribute default="0" name="absoluteWidth" type="xs:integer" use="optional"> <!-- used as replacement for relativeWidth when generating EXCEL in ArisReportProcessor -->
			    <xs:annotation>
                    <xs:documentation>
                        Use this parameter for EXCEL reports only.
                        Absolute width this cell shall have. Minimum is 0.
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute default="1" name="rowSpan" type="xs:integer" use="optional"/>
			<xs:attribute default="1" name="colSpan" type="xs:integer" use="optional"/>
            <xs:attribute name="styleID" type="xs:string" use="optional">
                <xs:annotation>
                    <xs:documentation>
                        Must refer to a registered report style ID. If it is not specified, the style 'default' is used.
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="visibilityConstraint" type="xs:string" use="optional">
                <xs:annotation>
                    <xs:documentation>
                        Only used, if the data source is APPOBJ. The value must consist of one or more dataReferences (i.e. object attribute IDs), separated by '|'.
                        If at least one of these attributes is marked invisible by the rule engine, the entire processing of this section is skipped.
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="componentRightConstraint" type="xs:string" use="optional">
                <xs:annotation>
                    <xs:documentation>
                        The value must consist of one or more component IDs (see LicensedComponent), separated by '|'.
                        If the data source is APPOBJ and the AppObj has a client sign, the user must have these component rights for the corresponding client.
                        In all other cases, the user must have these rights in general.
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
        </xs:complexType>
	</xs:element>
<xs:element name="arisreportoutput">
		<xs:complexType>
            <xs:attribute name="dataReference" type="xs:string" use="optional"/>
            <!-- only usable as simple datasource reference, sub datasource notifications are ignored -->
            <xs:attribute name="datasourceID" type="xs:string" use="optional">
                <xs:annotation>
                    <xs:documentation>
                        If the report definition uses several data sources, the desired one can be referenced here.
                        Unlike section and table elements, a cell can only use simple data source references and no sub data source notifications.
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute default="true" name="renderAsText" type="xs:boolean" use="optional">
                <xs:annotation>
                    <xs:documentation>
                        This flag adds the value of the resolved dataReference as text to the report document, depending on the chosen renderer.
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute default="false" name="renderAsIcon" type="xs:boolean" use="optional">
                <xs:annotation>
                    <xs:documentation>
                        This flag adds the value of the resolved dataReference as icon to the report document, depending on the chosen renderer.
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute default="false" name="renderAsChart" type="xs:boolean" use="optional">
                <xs:annotation>
                    <xs:documentation>
                        This value is only used internally by the report engine.
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="rendererID" type="xs:string" use="optional">
                <xs:annotation>
                    <xs:documentation>
                        Renderer to be used to change the original text or icon output of the resolved dataReference.
                        The parameter value must match a mapping in the uiClassMappings under the category 'reportRenderers' (see reporting guide for details).
                        If no rendererID is provided, the appropriate default renderer mapping is used.
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="rendererParameter" type="xs:string" use="optional">
                <xs:annotation>
                    <xs:documentation>
                        Parameters of the chosen renderer. Please refer to the renderer documentation to find out which parameters are accepted.
                        Renderer parameters are separated by '|'. Each single parameter has the form [key]=[value].
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="propertyKey" type="xs:string" use="optional">
                <xs:annotation>
                    <xs:documentation>
                        Adds the value of the localized propertyKey as text to the report document.
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="outputText" type="xs:string" use="optional">
                <xs:annotation>
                    <xs:documentation>
                        Adds plain text to the report document.
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute default="false" name="newLine" type="xs:boolean" use="optional">
                <xs:annotation>
                    <xs:documentation>
                        Adds a newLine character after the textual output. May be used if the cell contains several output elements.
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="styleID" type="xs:string" use="optional">
                <xs:annotation>
                    <xs:documentation>
                        Must refer to a registered report style ID. If it is not specified, the style 'default' is used.
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="visibilityConstraint" type="xs:string" use="optional">
                <xs:annotation>
                    <xs:documentation>
                        Only used, if the datas ource is APPOBJ. The value must consist of one or more dataReferences (i.e. object attribute IDs), separated by '|'.
                        If at least one of these attributes is marked invisible by the rule engine, the entire processing of this section is skipped.
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="componentRightConstraint" type="xs:string" use="optional">
                <xs:annotation>
                    <xs:documentation>
                        The value must consist of one or more component IDs (see LicensedComponent), separated by '|'.
                        If the data source is APPOBJ and the AppObj has a client sign, the user must have these component rights for the corresponding client.
                        In all other cases, the user must have these rights in general.
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
        </xs:complexType>
	</xs:element>
<xs:element name="arissubreport">
		<xs:complexType>
			<xs:attribute name="reportID" type="xs:string" use="required"/>
			<xs:attribute name="datasourceID" type="xs:string" use="required">
                <xs:annotation>
                    <xs:documentation>
                        If the report definition uses several data sources, the desired one can be referenced here.
                        Unlike section and table elements, a cell can only use simple data source references and no sub data source notifications.
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <!-- must be specified in case the referenced sub report must be autogenerated -->
            <xs:attribute name="reportType" use="required">
                <xs:annotation>
                    <xs:documentation>
                        Must be specified in case the referenced sub report must be autogenerated.
                    </xs:documentation>
                </xs:annotation>
				<xs:simpleType>
					<xs:restriction base="xs:string">
						<xs:enumeration value="FORM"/>
						<xs:enumeration value="LIST"/>
                        <xs:enumeration value="EVALUATION"/>
					</xs:restriction>
				</xs:simpleType>
			</xs:attribute>
			<xs:attribute name="substitutePattern" type="xs:string" use="optional">
                <xs:annotation>
                    <xs:documentation>
                        Allows to replace pattern references in a sub report by own pattern references.
                        Example: "MY_OLD_PATTERN=MY_NEW_PATTERN|SOME_OTHER_OLD_PATTERN=SOME_OTHER_NEW_PATTERN" means that
                                 MY_OLD_PATTERN is replaced by MY_NEW_PATTERN and SOME_OTHER_OLD_PATTERN is replaced by SOME_OTHER_NEW_PATTERN
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
			<xs:attribute name="addPatternParameter" type="xs:string" use="optional">
                <xs:annotation>
                    <xs:documentation>
                        Allows to replace pattern parameters in a sub report by own pattern parameters.
                        Example: [MY_NEW_PATTERN]PARAM1=value1|[MY_NEW_PATTERN]PARAM2=value2|[SOME_OTHER_NEW_PATTERN]PARAM3=value3|[SOME_OTHER_NEW_PATTERN]PARAM4=value4
                                 means the for pattern MY_NEW_PATTERN the parameters PARAM1 and PARAM2 get new values, for pattern SOME_OTHER_NEW_PATTERN the parameters PARAM3 and PARAM4
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute default="true" name="newPage" type="xs:boolean" use="optional">
                <xs:annotation>
                    <xs:documentation>
                        Indicates, whether a sub report is to start with a new page or not. This flag is only relevant for PDF reports.
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <!-- list of IDs separated by "|" or value "all" for ignoring all -->
            <xs:attribute default="" name="ignoreAutocomponents" type="xs:string" use="optional">
                <xs:annotation>
                    <xs:documentation>
                        Indicates, which auto components are to skip in the referenced sub report. If several auto components are to be skipped, they are separated by '|'.
                        Value 'all' can be used for ignoring all.
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute default="true" name="discardMainDatasourceAfterUse" type="xs:boolean" use="optional">
                <xs:annotation>
                    <xs:documentation>
                        This flag is used to discard the main data source and free memory space.
                        This is done by default since it is useful especially for large reports. It must be deactivated however, if you need to reuse the same data source within the main report or another sub report;
                        otherwise the report creation will be aborted.
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
        </xs:complexType>
	</xs:element>
<xs:element name="arisreportselection">
        <xs:annotation>
            <xs:documentation>
                Represents a report selection dialog which is completely autogenerated from this selection definition.
                If a form or list report with ID 'A' is executed and there already exists a report selection definition with ID 'A' or 'A_SELECT', the selection is shown instead.
            </xs:documentation>
        </xs:annotation>
		<xs:complexType>
			<xs:sequence>
				<xs:element maxOccurs="unbounded" minOccurs="1" ref="arisreportselectionoption">
                    <xs:annotation>
                        <xs:documentation>
                            An report selection with only one option does an internal redirect to the report without triggering a selection dialog display.
                            This can be used as customizing hook to replace a standard report selection by a custom report.
                            Example: incident form has a standard report selection which always displays a selection dialog. If a customizer replaces it by a custom
                            report selection which has only one option pointing at a custom report X then report X is executed directly, without any selection dialog displayed.
                        </xs:documentation>
                    </xs:annotation>
                </xs:element>
			</xs:sequence>
			<xs:attribute name="selectionID" type="xs:string" use="required">
                <xs:annotation>
                    <xs:documentation>
                        The ID must be unique among the selection definitions but can match any report definition ID.
                    </xs:documentation>
                </xs:annotation>
			</xs:attribute>
            <xs:attribute name="selectionText" type="xs:string" use="optional">
                <xs:annotation>
                    <xs:documentation>
                        The property key to be used as selection text. If not specified then "report.selection.reportselection.headerText" is used as default.
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute default="false" name="multipleSelection" type="xs:boolean" use="optional">
                <xs:annotation>
                    <xs:documentation>
                        If set to 'true' (default: 'false'), you can select several reports by check boxes. They are executed in succession and their results are merged to one document.
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute default="ARCM_REPORT_SELECTION.HLP" name="helpID" type="xs:string" use="optional"/>
        </xs:complexType>
	</xs:element>
<xs:element name="arisreportselectionoption">
		<xs:complexType>
			<xs:attribute name="optiontext" type="xs:string" use="required">
                <xs:annotation>
                    <xs:documentation>
                        The property key to be used as option text.
                    </xs:documentation>
                </xs:annotation>
			</xs:attribute>
			<xs:attribute name="destinationReportID" type="xs:string" use="required">
                <xs:annotation>
                    <xs:documentation>
                        The selection option can either point to a report definition or to another report selection.
                        If the current report selection has the ID 'A' and the selection option points to 'A', the report engine will try to find the report definition 'A' instead of executing the selection 'A' again.
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute default="false" name="selectedByDefault" type="xs:boolean" use="optional">
                <xs:annotation>
                    <xs:documentation>
                        Decides if the report option is initally selected or not.
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
		</xs:complexType>
	</xs:element>
<xs:element name="nodeTypes">
        <xs:annotation>
            <xs:documentation>
                List of non-structural element types that do not represent an object type.
            </xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:sequence>
                <xs:element maxOccurs="unbounded" minOccurs="0" ref="nodeType"/>
            </xs:sequence>
        </xs:complexType>
    </xs:element>
<xs:element name="nodeType">
        <xs:annotation>
            <xs:documentation>
                Used to assign icons to NodeTypes that do not have an icon assigned by an ObjectType (object from objectTypes.xml).
            </xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:attribute name="name" type="xs:string" use="required">
                <xs:annotation>
                    <xs:documentation>
                        Used to access the NodeType using Java code.
                        INodeType type = INodeType.DeclaredNodeType.Access.get("nameOfCustomNodeType");
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="image" type="xs:string" use="optional">
                <xs:annotation>
                    <xs:documentation>
                        Relative path to a picture (in PNG format, 16x16 pixel) from "/design/default/images/"
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
        </xs:complexType>
    </xs:element>
<xs:element name="workflows">
        <xs:complexType>
            <xs:sequence>
                <xs:element maxOccurs="unbounded" minOccurs="0" ref="workflow"/>
            </xs:sequence>
        </xs:complexType>
    </xs:element>
<xs:element name="workflow">
        <xs:complexType>
            <xs:sequence>
                <xs:element maxOccurs="1" minOccurs="0" ref="state.initial"/>
                <xs:element maxOccurs="1" minOccurs="0" ref="state.prepared"/>
                <xs:element maxOccurs="unbounded" minOccurs="1" ref="state"/>
                <xs:element maxOccurs="unbounded" minOccurs="0" ref="state.deleted"/>
            </xs:sequence>
            <xs:attribute name="objectType.id" type="xs:string" use="required">
                <xs:annotation>
                    <xs:documentation>
                        ID of the workflow must by an ID which is defined in objectTypes.xml.
                        Each objectType can have one workflow configuration.
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
        </xs:complexType>
    </xs:element>
<xs:element name="prepare">
        <xs:annotation>
            <xs:documentation>
                One of these transitions is executed immediately after the generation of an object.
                The chain of this transition is usually used to set default values.
                It is not possible to configure the target of this transition. 
                It is always the state which is configured in the element "state.prepared".
            </xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:sequence>
                <xs:element maxOccurs="unbounded" minOccurs="0" ref="permission.workflow"/>
                <xs:element maxOccurs="unbounded" minOccurs="0" ref="permission.job"/>
            </xs:sequence>
            <xs:attribute name="chain.id" type="xs:string" use="required">
                <xs:annotation>
                    <xs:documentation>
                        References a command chain which is configured in the corresponding command catalog of the workflow.
                        This command chain should be used to set default values.
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
        </xs:complexType>
    </xs:element>
<xs:element name="state.initial">
        <xs:annotation>
            <xs:documentation>
                This state is the start state of an object. If an object is generated,  
                one of the associated "prepare" transitions is immediately executed. It is not possible
                to modify the object before the "prepare" transition is executed.
                
                This state can only be exited using a "prepare" transition.
                An object can be in this state once and cannot come back to this state.
            </xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:sequence>
                <xs:element maxOccurs="unbounded" minOccurs="1" ref="prepare"/>
            </xs:sequence>
        </xs:complexType>
    </xs:element>
<xs:element name="insert"> 
        <xs:annotation>
            <xs:documentation>
                Is executed just before an object is written to the database for the first time.                
            </xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:sequence>
                <xs:element maxOccurs="unbounded" minOccurs="0" ref="permission.workflow"/>
                <xs:element maxOccurs="unbounded" minOccurs="0" ref="permission.job"/>
                <xs:element maxOccurs="unbounded" minOccurs="0" ref="attribute.change"/>
            </xs:sequence>
            <xs:attribute name="to.state.id" type="xs:string" use="required">
                <xs:annotation>
                    <xs:documentation>
                        The value must correspond to the value of a state ID. 
                        After this transition has been executed, the object must have the attribute values defined at the state.
                        The state of a state is defined by its XML elements "attribute".  
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="chain.id" type="xs:string" use="required">
                <xs:annotation>
                    <xs:documentation>
                        References a command chain which is configured in the corresponding command catalog of the workflow.
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
        </xs:complexType>
    </xs:element>
<xs:element name="state.prepared">
        <xs:annotation>
            <xs:documentation>
                An object is in this state, if it has been changed but not yet saved.
                An object can only be in this state and cannot come back to this state.
            </xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:sequence>
                <xs:element maxOccurs="unbounded" minOccurs="1" ref="insert"/>
            </xs:sequence>
        </xs:complexType>
    </xs:element>
<xs:element name="update">  
        <xs:annotation>
            <xs:documentation>
                Is executed just before an object is written to the database.       
            </xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:sequence>
                <xs:element maxOccurs="unbounded" minOccurs="0" ref="permission.workflow"/>
                <xs:element maxOccurs="unbounded" minOccurs="0" ref="permission.job"/>
                <xs:element maxOccurs="unbounded" minOccurs="0" ref="attribute.change"/>
            </xs:sequence>
            <xs:attribute name="to.state.id" type="xs:string" use="required">
                <xs:annotation>
                    <xs:documentation>
                        The value must correspond to the value of a state ID. 
                        After this transition has been executed, the object must have the attribute values defined at the state.
                        The required attribute values of a workflow state are defined by its XML elements "attribute".
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="chain.id" type="xs:string">
                <xs:annotation>
                    <xs:documentation>
                        References a command chain which is configured in the corresponding command catalog of the workflow.
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
        </xs:complexType>
    </xs:element>
<xs:element name="delete">   
        <xs:annotation>
            <xs:documentation>
                Is executed just before an object is marked as deleted in the database.
                In the case of non-versioned objects, this happens before an object is deleted from the database. 
                An object can only be deleted, if it has a state containing a delete transition. 
                The Delete button is not available for objects having a state without outgoing delete transition.
            </xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:sequence>
                <xs:element maxOccurs="unbounded" minOccurs="0" ref="permission.workflow"/>
                <xs:element maxOccurs="unbounded" minOccurs="0" ref="permission.job"/>
            </xs:sequence>
            <xs:attribute name="to.state.id" type="xs:string" use="required">
                <xs:annotation>
                    <xs:documentation>
                        The value must correspond to the value of a state ID. 
                        After this transition has been executed, the object must have the attribute values defined at the state.
                        The required attribute values of a workflow state are defined by its XML elements "attribute".
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="chain.id" type="xs:string" use="required">
                <xs:annotation>
                    <xs:documentation>
                        References a command chain which is configured in the corresponding command catalog of the workflow.
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
        </xs:complexType>
    </xs:element>
<xs:element name="reset"> 
        <xs:annotation>
            <xs:documentation>
                Is executed, if a user clicks on the Reset button in a form or if an internal process resets the object.
                An object can only be reset, if it has a state containing a reset transition.  
                The Reset button is not available for objects having a state without outgoing reset transition 
            </xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:sequence>
                <xs:element maxOccurs="unbounded" minOccurs="0" ref="permission.workflow"/>
                <xs:element maxOccurs="unbounded" minOccurs="0" ref="permission.job"/>
            </xs:sequence>
            <xs:attribute name="to.state.id" type="xs:string" use="required">
                <xs:annotation>
                    <xs:documentation>
                        The value must correspond to the value of a state ID. 
                        After this transition has been executed, the object must have the attribute values defined at the state.
                        The required attribute values of a workflow state are defined by its XML elements "attribute".
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="chain.id" type="xs:string" use="required">
                <xs:annotation>
                    <xs:documentation>
                        References a command chain which is configured in the corresponding command catalog of the workflow.
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
        </xs:complexType>
    </xs:element>
<xs:element name="transitions">
        <xs:annotation>
            <xs:documentation>
                Possible transitions which the object can use to pass to another state.
            </xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:sequence>
                <xs:element maxOccurs="unbounded" minOccurs="0" ref="update"/>
                <xs:element maxOccurs="unbounded" minOccurs="0" ref="reset"/>
                <xs:element maxOccurs="unbounded" minOccurs="0" ref="delete"/>
            </xs:sequence>
        </xs:complexType>
    </xs:element>
<xs:element name="state">
        <xs:annotation>
            <xs:documentation>
                An object has this state, if all attribute values of the object match the values
                that are defined in the 'attribute' element.
                An object can return to this state as often as required.
            </xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:sequence>
                <xs:element maxOccurs="unbounded" minOccurs="0" ref="attribute"/>
                <xs:element maxOccurs="1" minOccurs="0" ref="transitions"/>
            </xs:sequence>
            <xs:attribute name="id" type="xs:string" use="required"/>
        </xs:complexType>
    </xs:element>
<xs:element name="recover"> 
        <xs:annotation>
            <xs:documentation>
                Is executed just before an object that is marked as deleted in the database will be restored. 
                A Recover button is only available for an object, if it has been deleted and if a "recover"  
                transition is configured at the "state.deleted" state. 
            </xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:sequence>
                <xs:element maxOccurs="unbounded" minOccurs="0" ref="permission.workflow"/>
                <xs:element maxOccurs="unbounded" minOccurs="0" ref="permission.job"/>
                <xs:element maxOccurs="unbounded" minOccurs="0" ref="attribute.change"/>
            </xs:sequence>
            <xs:attribute name="to.state.id" type="xs:string">
                <xs:annotation>
                    <xs:documentation>
                        The value must correspond to the value of a state ID. 
                        After this transition has been executed, the object must have the attribute values defined at the state.
                        The required attribute values of a workflow state are defined by its XML elements "attribute".
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="chain.id" type="xs:string" use="required">
                <xs:annotation>
                    <xs:documentation>
                        References a command chain which is configured in the corresponding command catalog of the workflow.
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
        </xs:complexType>
    </xs:element>
<xs:element name="state.deleted">
        <xs:annotation>
            <xs:documentation>
                An object has this state, if it is deleted and if all attribute values of the object match the values  
                that are defined in the 'attribute' XML element. 
                This state can only be left with the help of a 'recover' transition. 
            </xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:sequence>
                <xs:element maxOccurs="unbounded" minOccurs="0" ref="attribute"/>
                <xs:element maxOccurs="unbounded" minOccurs="0" ref="recover"/>
            </xs:sequence>
            <xs:attribute name="id" type="xs:string" use="required"/>
        </xs:complexType>
    </xs:element>
<xs:element name="attribute">
        <xs:annotation>
            <xs:documentation>
                Used within the 'State' element to define attributes with attribute values that
                an object must have for the corresponding state. To determine the state of the object,
                only the persistent attribute values are considered. 
            </xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:attribute name="id" type="xs:string" use="required">
                <xs:annotation>
                    <xs:documentation>
                        ID of an attribute that must exist for the object. Only enumeration and boolean attributes are permitted.
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="value" type="xs:string" use="required">
                <xs:annotation>
                    <xs:documentation>
                        Persistent value of the attribute that the object must have.
                        If the attribute is an enumeration attribute, the value can be a comma separated list with enumeration-item-ids. 
                        Virtual and non-virtual items can be used. 
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
        </xs:complexType>
    </xs:element>
<xs:element name="attribute.change"> 
        <xs:annotation>
            <xs:documentation>
                Used to describe attribute changes that are required   
                for the execution of the associated transition.             
            </xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:attribute name="id" type="xs:string" use="required">
                <xs:annotation>
                    <xs:documentation>
                        Attribute ID from objectTypes.xml. Only enumeration and boolean attributes are permitted.
                    </xs:documentation>
                </xs:annotation>    
            </xs:attribute>
            <xs:attribute name="from" type="xs:string" use="optional">
                <xs:annotation>
                    <xs:documentation>
                        Valid persistent value of the attribute.  
                        * For enumeration attributes, the "id" of the item must be specified. Virtual items are permitted. 
                        * For boolean attributes only "true" and "false" are permitted                        
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="to" type="xs:string" use="required">
                 <xs:annotation>
                    <xs:documentation>
                        Possible valid transient value of the attribute. For example, a value in a form selectable by the user.
                        * For enumeration attributes, the "id" of the item must be specified. Virtual items are permitted. 
                        * For boolean attributes, only "true" and "false" are permitted.                        
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
        </xs:complexType>
    </xs:element>
<xs:element name="permission.workflow"> 
        <xs:annotation>
            <xs:documentation>
                This element is used to allow the execution of a transition only if the transition is called 
                by a workflow with the specified "id".
                
                Example: 
                    If an "Issue" object is to be created, deleted or changed by saving a "Testcase" oject, it is necessary 
                    to specify the "permission.workflow" element with the attribute id="Testcase" in the workflow configuration 
                    of the "Issue" object at the appropriate transition.                     
            </xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:attribute name="id" type="xs:string" use="required">
                 <xs:annotation>
                    <xs:documentation>
                        Must be a workflow ID. A workflow ID must be an objectType ID.
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
        </xs:complexType>
    </xs:element>
<xs:element name="permission.job">
        <xs:annotation>
            <xs:documentation>
                This element is used to allow the execution of a transition only if the 
                transition is called by a job with the specified "id".
                
                You thus have the option to define a transition that is only executed, if the corresponding change
                at the object has been executed by a job.
                
                If this attribute is not specified, the transition cannot be executed ba a job.
            </xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:attribute name="id" type="xs:string" use="required"/>
        </xs:complexType>
    </xs:element>
<xs:element name="catalogs">
		<xs:complexType>
		<xs:sequence>
			<xs:element maxOccurs="unbounded" minOccurs="0" ref="catalog"/>
		</xs:sequence>
		</xs:complexType>
	</xs:element>
<xs:element name="catalog">
        <xs:annotation>
            <xs:documentation>
                Defines all command chains belonging to a specific workflow. The catalog ID must match the object type ID to which the workflow refers.
            </xs:documentation>
        </xs:annotation>
		<xs:complexType>
		<xs:sequence>
			<xs:element maxOccurs="unbounded" minOccurs="0" ref="commandchain"/>
		</xs:sequence>
        <xs:attribute name="id" type="xs:string" use="required"/>
		</xs:complexType>
	</xs:element>
<xs:element name="commandchain">
        <xs:annotation>
            <xs:documentation>
                Defines all commands belonging to a single command chain. The chain is executed for each workflow transition where the chain ID is set at the transition attribute "chain.id".
            </xs:documentation>
        </xs:annotation>
		<xs:complexType>
		<xs:sequence>
			<xs:element maxOccurs="unbounded" minOccurs="0" ref="command"/>
		</xs:sequence>
        <xs:attribute name="id" type="xs:string" use="required">
            <xs:annotation>
                <xs:documentation>
                    The chain ID must be unique within the catalog.
                </xs:documentation>
            </xs:annotation>
         </xs:attribute>
		</xs:complexType>
	</xs:element>
<xs:element name="command">
        <xs:annotation>
            <xs:documentation>
                Specifies a single command which is to be executed as part of this chain. Command execution is done according to the order specified in the command chain.
            </xs:documentation>
        </xs:annotation>
		<xs:complexType>
        <xs:sequence>
			<xs:element maxOccurs="unbounded" minOccurs="0" ref="parameter">
                <xs:annotation>
                    <xs:documentation>
                        Parameters for influencing the command's behaviour. Check the command documentation and annotations to find out which parameters are accepted by the different commands.
                    </xs:documentation>
                </xs:annotation>
			</xs:element>
		</xs:sequence>
		<xs:attribute name="id" type="xs:string" use="required">
            <xs:annotation>
                <xs:documentation>
                    Must match one of the mapped commands of the file "commandClassMappings.xml" (mapping type "Command") or of any other similar xml file defined by "blClassMappings.xsd".
                </xs:documentation>
            </xs:annotation>
		</xs:attribute>
		</xs:complexType>
	</xs:element>
<xs:element name="taskConfigurations">
        <xs:annotation>
            <xs:documentation>
                Root element containing separate task config items.
            </xs:documentation>
        </xs:annotation>

        <xs:complexType>
            <xs:sequence>
                <xs:element maxOccurs="unbounded" ref="task"/>
            </xs:sequence>
        </xs:complexType>
    </xs:element>
<xs:element name="task">
        <xs:annotation>
            <xs:documentation>
                Resembles a complete task configuration. Encompasses responsibility, state lifecycle and monitoring
                strategy.
            </xs:documentation>
        </xs:annotation>

        <xs:complexType>
            <xs:sequence>
                <xs:element maxOccurs="1" minOccurs="1" ref="responsibility"/>
                <xs:element maxOccurs="1" minOccurs="1" ref="taskState"/>
                <xs:element maxOccurs="1" minOccurs="0" ref="monitorStrategy"/>
            </xs:sequence>

            <xs:attribute name="id" type="xs:string" use="required">
                <xs:annotation>
                    <xs:documentation>
                        The task ID. Must be unique in combination with the referenced object type.
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="objectType.idref" type="xs:string" use="required">
                <xs:annotation>
                    <xs:documentation>
                        The object type of the referenced task AppObj.
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="role.idref" type="xs:string" use="optional">
                <xs:annotation>
                    <xs:documentation>
                        The role to be displayed inside the task list.
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
        </xs:complexType>
    </xs:element>
<xs:element name="responsibility">
        <xs:annotation>
            <xs:documentation>
                Describes if either a complete user group or a list of users is responsible for this task.
            </xs:documentation>
        </xs:annotation>

        <xs:complexType>
            <xs:sequence>
                <xs:element maxOccurs="1" minOccurs="0" ref="assignedUsergroup"/>
                <xs:element maxOccurs="1" minOccurs="0" ref="assignedUsers"/>
                <xs:element maxOccurs="1" minOccurs="0" ref="clientSpecificUsergroups"/>
                <xs:element maxOccurs="1" minOccurs="0" ref="crossClientUsergroups"/>
            </xs:sequence>
        </xs:complexType>
    </xs:element>
<xs:element name="assignedUsergroup">
        <xs:annotation>
            <xs:documentation>
                Specifies that a user group is responsible for the task.
            </xs:documentation>
        </xs:annotation>

        <xs:complexType>
            <xs:attribute name="objectAttribute.idref" type="xs:string" use="required">
                <xs:annotation>
                    <xs:documentation>
                        The attribute idref determines at which list attribute of type USERGROUP this user group is
                        assigned at the referenced task AppObj.
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
        </xs:complexType>
    </xs:element>
<xs:element name="assignedUsers">
        <xs:annotation>
            <xs:documentation>
                Specifies that a list of separate users is responsible for this task.
            </xs:documentation>
        </xs:annotation>

        <xs:complexType>
            <xs:attribute name="objectAttribute.idref" type="xs:string" use="required">
                <xs:annotation>
                    <xs:documentation>
                        The attribute idref determines at which list attribute of type USER the responsible users are
                        assigned at the referenced task AppObj.
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
        </xs:complexType>
    </xs:element>
<xs:element name="clientSpecificUsergroups">
        <xs:annotation>
            <xs:documentation>
                Specifies that all members of client-specific user groups with a certain role are responsible. Please
                note that in case the referenced task AppObj does not belong to any client there will be no task
                responsible users in this case!
            </xs:documentation>
        </xs:annotation>

        <xs:complexType>
            <xs:attribute name="role.idref" type="xs:string" use="required">
                <xs:annotation>
                    <xs:documentation>
                        The role idref determines which role the client-specific user groups must have.
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
        </xs:complexType>
    </xs:element>
<xs:element name="crossClientUsergroups">
        <xs:annotation>
            <xs:documentation>
                Specifies that all members of cross-client user groups with a certain role are responsible.
            </xs:documentation>
        </xs:annotation>

        <xs:complexType>
            <xs:attribute name="role.idref" type="xs:string" use="required">
                <xs:annotation>
                    <xs:documentation>
                        The role idref determines which role the client-specific user groups must have.
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
        </xs:complexType>
    </xs:element>
<xs:element name="taskState">
        <xs:annotation>
            <xs:documentation>
                Describes how the task lifecycle state map onto the workflow states of the referenced task AppObj.
            </xs:documentation>
        </xs:annotation>

        <xs:complexType>
            <xs:sequence>
                <xs:element maxOccurs="1" minOccurs="1" ref="open"/>
                <xs:element maxOccurs="1" minOccurs="1" ref="completed"/>
                <xs:element maxOccurs="1" minOccurs="1" ref="notCompleted"/>
            </xs:sequence>
        </xs:complexType>
    </xs:element>
<xs:element name="open">
        <xs:annotation>
            <xs:documentation>
                If the referenced task AppObj enters one of its workflow states mentioned here then a new task item with
                state 'open' is created.
            </xs:documentation>
        </xs:annotation>

        <xs:complexType>
            <xs:attribute name="workflowState.idrefs" type="xs:string" use="required">
                <xs:annotation>
                    <xs:documentation>
                        A comma separated list of workflow state IDs.
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
        </xs:complexType>
    </xs:element>
<xs:element name="completed">
        <xs:annotation>
            <xs:documentation>
                If the referenced task AppObj enters one of its workflow states mentioned here then all existing task
                items with have the same task ID and have the state 'open' get the new state 'completed'
            </xs:documentation>
        </xs:annotation>

        <xs:complexType>
            <xs:attribute name="workflowState.idrefs" type="xs:string" use="required">
                <xs:annotation>
                    <xs:documentation>
                        A comma separated list of workflow state IDs.
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
        </xs:complexType>
    </xs:element>
<xs:element name="notCompleted">
        <xs:annotation>
            <xs:documentation>
                If the referenced task AppObj enters one of its workflow states mentioned here then all existing task
                items with have the same task ID and have the state 'open' get the new state 'notCompleted'
            </xs:documentation>
        </xs:annotation>

        <xs:complexType>
            <xs:attribute name="workflowState.idrefs" type="xs:string" use="required">
                <xs:annotation>
                    <xs:documentation>
                        A comma separated list of workflow state IDs.
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
        </xs:complexType>
    </xs:element>
<xs:element name="monitorStrategy">
        <xs:annotation>
            <xs:documentation>
                Describes how the monitor job shall handle the task items. Specifying a monitor strategy is optional -
                if there is none specified then the monitor job does not care for the task item at all.
            </xs:documentation>
        </xs:annotation>

        <xs:complexType>
            <xs:sequence>
                <xs:element maxOccurs="1" minOccurs="0" ref="timeRanges"/>
                <xs:element maxOccurs="unbounded" minOccurs="1" ref="monitorLevel"/>
            </xs:sequence>
        </xs:complexType>
    </xs:element>
<xs:element name="timeRanges">
        <xs:annotation>
            <xs:documentation>
                Describes the execution time range and control time range of this task item. Specifying the ranges is
                optional - if there is none specified then the implicit execution time range is defined by the date
                attributes 'plannedstartdate' and 'plannedenddate', the implicit control execution range is defined by the
                date attributes 'controlstartdate' and 'controlenddate'.
            </xs:documentation>
        </xs:annotation>

        <xs:complexType>
            <xs:sequence>
                <xs:element maxOccurs="1" minOccurs="1" ref="executionPeriod"/>
                <xs:element maxOccurs="1" minOccurs="1" ref="controlPeriod"/>
            </xs:sequence>
        </xs:complexType>
    </xs:element>
<xs:element name="executionPeriod">
        <xs:annotation>
            <xs:documentation>
                Defines the execution time range.
            </xs:documentation>
        </xs:annotation>

        <xs:complexType>
            <xs:attribute name="fromObjectAttribute.idref" type="xs:string" use="required">
                <xs:annotation>
                    <xs:documentation>
                        The attribute ID of the date attribute at the referenced task AppObj where the execution start
                        date is stored.
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="toObjectAttribute.idref" type="xs:string" use="required">
                <xs:annotation>
                    <xs:documentation>
                        The attribute ID of the date attribute at the referenced task AppObj where the execution end
                        date is stored.
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
        </xs:complexType>
    </xs:element>
<xs:element name="controlPeriod">
        <xs:annotation>
            <xs:documentation>
                Defines the control time range.
            </xs:documentation>
        </xs:annotation>

        <xs:complexType>
            <xs:attribute name="fromObjectAttribute.idref" type="xs:string" use="required">
                <xs:annotation>
                    <xs:documentation>
                        The attribute ID of the date attribute at the referenced task AppObj where the control start
                        date is stored.
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="toObjectAttribute.idref" type="xs:string" use="required">
                <xs:annotation>
                    <xs:documentation>
                        The attribute ID of the date attribute at the referenced task AppObj where the control end
                        date is stored.
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
        </xs:complexType>
    </xs:element>
<xs:element name="monitorLevel">
        <xs:annotation>
            <xs:documentation>
                Describes a monitoring level for the monitor job. A level specifies when it is reached during the task
                execution period, who is informed per message and what attribute changes are made at the referenced
                task AppObj.
            </xs:documentation>
        </xs:annotation>

        <xs:complexType>
            <xs:sequence>
                <xs:element maxOccurs="unbounded" minOccurs="0" ref="monitorChange">
                    <xs:annotation>
                        <xs:documentation>
                            Defines which attributes changes the monitor job will do at the referenced task AppObj once
                            this level is reached.
                            Keep in mind that those changes can trigger workflow state changes and command chains like
                            regular user interactions!
                            Attribute changes are only allowed for levels of type 'percentage' and value '100'.
                        </xs:documentation>
                    </xs:annotation>
                </xs:element>
                <xs:element maxOccurs="unbounded" minOccurs="0" ref="monitorMessage">
                    <xs:annotation>
                        <xs:documentation>
                            Defines the message that the monitor job shall send when a monitoring level is reached.
                            Specifying an message is optional - if none is specified then the default monitoring message
                            with template 'monitorjob' is sent to the responsible user group or users of this task.
                        </xs:documentation>
                    </xs:annotation>
                </xs:element>
            </xs:sequence>

            <xs:attribute name="type" use="required">
                <xs:annotation>
                    <xs:documentation>
                        Describes how the monitor job calculates if this level was reached or not.

                        Type 'percentage' means that a relative amount of time of the execution period must have passed.
                        The allowed percentage minimum is 0, the maximum is 100.
                        Example for a percentage value of 75: If the period encompasses 20 days, then an escalation of
                        75% will happen at day 15.

                        Type 'remainingTime' means that the remaining time at the execution period must be equal or
                        lesser than the specified amount.
                        The allowed remaining time minimum is 0. There is no maximum. It can be specified in days (ending with 'd') or hours (ending with 'h').
                        Example for a remaining time value of 3 days ('3d'): If the period encompasses 20 days, then the escalation will happen at day 18.
                        Example for a remaining time value of 12 hours ('12h'): If the period encompasses 20 days, then an escalation of 75% will happen at day 20, 12 hours before end.
                    </xs:documentation>
                </xs:annotation>
                <xs:simpleType>
                    <xs:restriction base="xs:string">
                        <xs:enumeration value="percentage"/>
                        <xs:enumeration value="remainingTime"/>
                    </xs:restriction>
                </xs:simpleType>
            </xs:attribute>
            <xs:attribute name="value" type="xs:string" use="required">
                <xs:annotation>
                    <xs:documentation>
                        The level value. Its meaning is connected to the level type described above.
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
        </xs:complexType>
    </xs:element>
<xs:element name="monitorChange">
        <xs:annotation>
            <xs:documentation>
                Defines the attribute change that the monitor job shall trigger at the referenced task AppObj when a
                monitoring level is reached.
            </xs:documentation>
        </xs:annotation>

        <xs:complexType>
            <xs:attribute name="objectAttribute.idref" type="xs:string" use="optional">
                <xs:annotation>
                    <xs:documentation>
                        Specifies the attribute ID of an enum or boolean attribute at the referenced task AppObj.
                        Attributes of other type are not allowed.
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="value" type="xs:string" use="optional">
                <xs:annotation>
                    <xs:documentation>
                        The value that shall be set at the attribute.
                        In case of enum attributes a comma separated list of the desired enum item IDs.
                        In case of boolean attributes either 'true' or 'false'.
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
        </xs:complexType>
    </xs:element>
<xs:element name="monitorMessage">
        <xs:annotation>
            <xs:documentation>
                Defines the message that the monitor job shall send when a monitoring level is reached.
            </xs:documentation>
        </xs:annotation>

        <xs:complexType>
            <xs:sequence>
                <xs:element maxOccurs="1" minOccurs="0" ref="monitorMessageLink"/>
            </xs:sequence>

            <xs:attribute name="to" type="xs:string" use="optional">
                <xs:annotation>
                    <xs:documentation>
                        Specifies the recipients of the message. If not specified then the recipients will be the members
                        of the responsible user group or the list of responsible users.
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="cc" type="xs:string" use="optional">
                <xs:annotation>
                    <xs:documentation>
                        Specifies the recipients which will get this message at CC. If not specified then there is no
                        sending as CC.
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="template.idref" type="xs:string" use="optional">
                <xs:annotation>
                    <xs:documentation>
                        The message template to be used. If not specified then 'monitorjob' will be used as default.
                        Important: any used template must use the placeholder '$monitorLog', otherwise the monitoring
                        info will not be included in that message!
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
        </xs:complexType>
    </xs:element>
<xs:element name="monitorMessageLink">
        <xs:annotation>
            <xs:documentation>
                The link into ARCM that shall be attached to a message.
            </xs:documentation>
        </xs:annotation>

        <xs:complexType>
            <xs:sequence>
                <xs:element maxOccurs="unbounded" minOccurs="0" ref="monitorMessageLinkFilter"/>
            </xs:sequence>

            <xs:attribute name="list.idref" type="xs:string" use="required">
                <xs:annotation>
                    <xs:documentation>
                        The ID of the list where the link shall lead to.
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
        </xs:complexType>
    </xs:element>
<xs:element name="monitorMessageLinkFilter">
        <xs:annotation>
            <xs:documentation>
                A filter attribute value that shall be applied to the linked list (overriding any default filter value).
            </xs:documentation>
        </xs:annotation>

        <xs:complexType>
            <xs:attribute name="filterAttribute.idref" type="xs:string" use="required">
                <xs:annotation>
                    <xs:documentation>
                        The ID of filter attribute. Only enumeration filter attributes are allowed.
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="value" type="xs:string" use="required">
                <xs:annotation>
                    <xs:documentation>
                        The enum item ID to filter for at the enum filter attribute.
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
        </xs:complexType>
    </xs:element>
<xs:element name="dialogs">
        <xs:complexType>
            <xs:sequence>
                <xs:element maxOccurs="unbounded" minOccurs="0" ref="dialog"/>
            </xs:sequence>
        </xs:complexType>
    </xs:element>
<xs:element name="dialog">
        <xs:annotation>
        <xs:documentation>
            By convention: dialog.[dialog ID].DBI as property key.
        </xs:documentation>
        </xs:annotation>

        <xs:complexType>
            <xs:choice maxOccurs="unbounded" minOccurs="0">
                <xs:element maxOccurs="unbounded" minOccurs="0" ref="booleanAttribute"/>
                <xs:element maxOccurs="unbounded" minOccurs="0" ref="dateAttribute"/>
                <xs:element maxOccurs="unbounded" minOccurs="0" ref="doubleAttribute"/>
                <xs:element maxOccurs="unbounded" minOccurs="0" ref="selectionAttribute"/>
                <xs:element maxOccurs="unbounded" minOccurs="0" ref="enumAttribute"/>
                <xs:element maxOccurs="unbounded" minOccurs="0" ref="longAttribute"/>
                <xs:element maxOccurs="unbounded" minOccurs="0" ref="objectAttribute"/>
                <xs:element maxOccurs="unbounded" minOccurs="0" ref="stringAttribute"/>
                <xs:element maxOccurs="unbounded" minOccurs="0" ref="textAttribute"/>
            </xs:choice>
            <xs:attribute name="id" type="xs:string" use="required">
                <xs:annotation>
                <xs:documentation>
                    Global unique identifier of the dialog.
                </xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="propertyKey" type="xs:string" use="optional">
                <xs:annotation>
                <xs:documentation>
                    Allows to specify another propertyKey than the generic one.
                </xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute default="input" name="type" use="optional">
                <xs:annotation>
                <xs:documentation>
                    Type of the dialog.
                </xs:documentation>
                </xs:annotation>
                <xs:simpleType>
                    <xs:restriction base="xs:string">
                        <xs:enumeration value="input"/> <!-- input dialog -->
                        <xs:enumeration value="okCancel"/> <!-- confirmation dialog -->
                        <xs:enumeration value="yesNoCancel"/> <!-- an extended confirmation dialog with three options -->
                    </xs:restriction>
               </xs:simpleType>
            </xs:attribute>
        </xs:complexType>
    </xs:element>
<xs:complexType name="abstractAttribute">
        <xs:annotation>
        <xs:documentation>
            By convention: dialog.[dialog ID].[attribute ID].DBI as property key.
        </xs:documentation>
        </xs:annotation>

        <xs:sequence>
            <xs:element maxOccurs="unbounded" minOccurs="0" ref="validate"/>
            <xs:element minOccurs="0" ref="modify"/>
        </xs:sequence>
        <xs:attribute name="id" type="xs:string" use="required">
            <xs:annotation>
            <xs:documentation>
                Local unique identifier of the attribute.
            </xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="defaultValue" type="xs:string" use="optional">
            <xs:annotation>
            <xs:documentation>
                Default value of the attribute.
            </xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute default="true" name="isMandatory" type="xs:boolean" use="optional">
            <xs:annotation>
            <xs:documentation>
                If true, the attribute has to be filled to be able to finalize the dialog.
            </xs:documentation>
            </xs:annotation>
        </xs:attribute>
		<xs:attribute default="true" name="isWritable" type="xs:boolean" use="optional">
            <xs:annotation>
            <xs:documentation>
                If false, the attribute will be dislayed in read-only mode in the dialog.
            </xs:documentation>
            </xs:annotation>
		</xs:attribute>
        <xs:attribute name="propertyKey" type="xs:string" use="optional">
            <xs:annotation>
            <xs:documentation>
                Allows to specify another propertyKey than the generic one.
            </xs:documentation>
            </xs:annotation>
        </xs:attribute>
    </xs:complexType>
<xs:element name="booleanAttribute" type="abstractAttribute"/>
<xs:element name="dateAttribute" type="abstractAttribute"/>
<xs:element name="doubleAttribute" type="abstractAttribute"/>
<xs:element name="longAttribute" type="abstractAttribute"/>
<xs:element name="textAttribute" type="abstractAttribute"/>
<xs:element name="stringAttribute" type="abstractAttribute"/>
<xs:element name="enumAttribute">
        <xs:complexType>
            <xs:complexContent>
                <xs:extension base="abstractAttribute">
                    <xs:attribute name="enumeration" type="xs:string" use="required">
                        <xs:annotation>
                        <xs:documentation>
                            Reference to an enumeration definition.
                        </xs:documentation>
                        </xs:annotation>
                    </xs:attribute>
                </xs:extension>
            </xs:complexContent>
        </xs:complexType>
    </xs:element>
<xs:element name="selectionAttribute">
        <xs:complexType>
            <xs:complexContent>
                <xs:extension base="abstractAttribute">
                    <xs:sequence>
                        <xs:element maxOccurs="unbounded" minOccurs="0" ref="parameter"/>
                    </xs:sequence>
                    <xs:attribute name="predefinedValueProvider" type="xs:string" use="optional">
                        <xs:annotation>
                        <xs:documentation>
                            Specifies a class from blClassMapping section value providers.
                            This class is used to find all possible values which will be offered to the user.
                        </xs:documentation>
                        </xs:annotation>
                    </xs:attribute>
                    <xs:attribute default="1" name="size" type="xs:integer" use="optional">
                        <xs:annotation>
                        <xs:documentation>
                            Maximum amount of elements that can be selected.
                            '-1' means unlimited
                        </xs:documentation>
                        </xs:annotation>
                    </xs:attribute>
                </xs:extension>
            </xs:complexContent>
        </xs:complexType>
    </xs:element>
<xs:element name="objectAttribute">
        <xs:complexType>
            <xs:complexContent>
                <xs:extension base="abstractAttribute">
                    <xs:attribute default="1" name="size" type="xs:integer" use="optional">
                        <xs:annotation>
                        <xs:documentation>
                            Maximum amount of elements.
                            '-1' means unlimited
                        </xs:documentation>
                        </xs:annotation>
                    </xs:attribute>
                </xs:extension>
            </xs:complexContent>
        </xs:complexType>
    </xs:element>
<xs:element name="rulesconfig">
        <xs:complexType>
            <xs:sequence>
                <xs:element maxOccurs="unbounded" minOccurs="1" ref="imp_object"/>
            </xs:sequence>
      </xs:complexType>
    </xs:element>
<xs:element name="imp_object">
        <xs:complexType>
            <xs:sequence>
                <xs:element maxOccurs="unbounded" minOccurs="0" ref="imp_ignore"/>
                <xs:element maxOccurs="unbounded" minOccurs="0" ref="imp_condition"/>
            </xs:sequence>
            <xs:attribute name="type" type="xs:string" use="required"/>
            <xs:attribute name="extendedValidation" type="xs:boolean" use="optional"/>
        </xs:complexType>
    </xs:element>
<xs:element name="imp_ignore">
      <xs:complexType>
        <xs:attribute name="name" type="xs:string" use="required"/>
      </xs:complexType>
    </xs:element>
<xs:element name="imp_condition">
        <xs:complexType>
          <xs:sequence>
              <xs:element maxOccurs="unbounded" minOccurs="0" ref="imp_condition"/>
              <xs:element maxOccurs="1" minOccurs="0" ref="imp_mandatory"/>
          </xs:sequence>
          <xs:attribute name="type" type="xs:string" use="required"/>
          <xs:attribute name="attrname" type="xs:string" use="optional"/>
          <xs:attribute name="attrvalue" type="xs:string" use="optional"/>
        </xs:complexType>
    </xs:element>
<xs:element name="imp_mandatory">
        <xs:complexType>
          <xs:sequence>
              <xs:element maxOccurs="unbounded" minOccurs="0" ref="imp_attr"/>
              <xs:element maxOccurs="unbounded" minOccurs="0" ref="imp_link"/>
          </xs:sequence>
        </xs:complexType>
    </xs:element>
<xs:element name="imp_attr">
      <xs:complexType>
        <xs:attribute name="name" type="xs:string" use="required"/>
      </xs:complexType>
    </xs:element>
<xs:element name="imp_link">
      <xs:complexType>
        <xs:attribute name="name" type="xs:string" use="required"/>
      </xs:complexType>
    </xs:element>
<xs:complexType name="nav.baseitem">
        <xs:choice maxOccurs="unbounded" minOccurs="0">
            <xs:element maxOccurs="1" minOccurs="0" ref="nav.access"/>
            <xs:element maxOccurs="unbounded" minOccurs="0" ref="nav.runtimeaccess"/>
            <xs:element maxOccurs="unbounded" minOccurs="0" ref="nav.parameter"/>
        </xs:choice>

        <xs:attribute default="" name="propertyKey" type="xs:string" use="optional">
            <xs:annotation>
                <xs:documentation>
                    possibility to overwrite the default propertyKey for all navigation items.
                    see the item definitions which property keys are used by default
                </xs:documentation>
            </xs:annotation>
        </xs:attribute>
    </xs:complexType>
<xs:complexType name="nav.filterablebaseitem">
        <xs:complexContent>
            <xs:extension base="nav.baseitem">
                <xs:sequence>
                    <xs:element maxOccurs="unbounded" minOccurs="0" ref="nav.filter"/>
                </xs:sequence>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>
<xs:complexType name="nav.basegrouping">
        <xs:complexContent>
            <xs:extension base="nav.baseitem">
                <xs:choice maxOccurs="unbounded" minOccurs="0">
                    <xs:element maxOccurs="unbounded" minOccurs="0" ref="nav.evaluation"/>
                    <xs:element maxOccurs="unbounded" minOccurs="0" ref="nav.item"/>
                    <xs:element maxOccurs="unbounded" minOccurs="0" ref="nav.data.grid"/>
                </xs:choice>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>
<xs:element name="nav.parameter">
        <xs:annotation>
            <xs:documentation>
                allows to specify custom parameters to a navigation item
            </xs:documentation>
        </xs:annotation>

        <xs:complexType>
            <xs:attribute name="name" type="xs:string" use="required">
                <xs:annotation>
                    <xs:documentation>
                        the name of the parameter
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="value" type="xs:string" use="required">
                <xs:annotation>
                    <xs:documentation>
                        the value of the parameter
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
        </xs:complexType>
    </xs:element>
<xs:element name="navigation">
        <xs:complexType>
            <xs:choice maxOccurs="unbounded" minOccurs="0">
                <xs:element maxOccurs="unbounded" minOccurs="0" ref="nav.module"/>
                <xs:element maxOccurs="unbounded" minOccurs="0" ref="nav.item"/>
            </xs:choice>
        </xs:complexType>
    </xs:element>
<xs:element name="nav.module">
        <xs:annotation>
            <xs:documentation>
                a set of navigation items.
                default propertyKey: none, no rendering done in UI
            </xs:documentation>
        </xs:annotation>

        <xs:complexType>
            <xs:complexContent>
                <xs:extension base="nav.basegrouping">
                    <xs:attribute default="SIDE_NAVIGATION" name="alignment" use="optional">
                        <xs:annotation>
                            <xs:documentation>
                                alignment of the navigation items: TOP_NAVIGATION or SIDE_NAVIGATION
                                TOP_NAVIGATION limits the the depths of nav.item structure to 1
                            </xs:documentation>
                        </xs:annotation>
                        <xs:simpleType>
                            <xs:restriction base="xs:string">
                                <xs:enumeration value="TOP_NAVIGATION"/>
                                <xs:enumeration value="SIDE_NAVIGATION"/>
                            </xs:restriction>
                        </xs:simpleType>
                    </xs:attribute>
                    <xs:attribute default="" name="module.id" type="xs:string" use="optional">
                        <xs:annotation>
                            <xs:documentation>
                                the unique id of this element or not set if an id.ref is specified
                            </xs:documentation>
                        </xs:annotation>
                    </xs:attribute>
                    <xs:attribute default="" name="module.idref" type="xs:string" use="optional">
                        <xs:annotation>
                            <xs:documentation>
                                the reference to an id of the same type or not set if an id is specified
                            </xs:documentation>
                        </xs:annotation>
                    </xs:attribute>
                </xs:extension>
            </xs:complexContent>
        </xs:complexType>
    </xs:element>
<xs:element name="nav.item">
        <xs:annotation>
            <xs:documentation>
                a sub-set of navigation items.
                default propertyKey: navigation.item.{id}.DBI
            </xs:documentation>
        </xs:annotation>

        <xs:complexType>
            <xs:complexContent>
                <xs:extension base="nav.basegrouping">
                    <xs:attribute default="" name="item.id" type="xs:string" use="optional">
                        <xs:annotation>
                            <xs:documentation>
                                the unique id of this element or not set if an id.ref is specified
                            </xs:documentation>
                        </xs:annotation>
                    </xs:attribute>
                    <xs:attribute default="" name="item.idref" type="xs:string" use="optional">
                        <xs:annotation>
                            <xs:documentation>
                                the reference to an id of the same type or not set if an id is specified
                            </xs:documentation>
                        </xs:annotation>
                    </xs:attribute>
                </xs:extension>
            </xs:complexContent>
        </xs:complexType>
    </xs:element>
<xs:element name="nav.data.grid">
        <xs:annotation>
            <xs:documentation>
                references a data grid defined in datagrid.xml
                default propertyKey: property of the referenced list definition (specific or default)
            </xs:documentation>
        </xs:annotation>

        <xs:complexType>
            <xs:complexContent>
                <xs:extension base="nav.filterablebaseitem">
                    <xs:attribute name="dataGrid.idref" type="xs:string" use="required">
                        <xs:annotation>
                            <xs:documentation>
                                the id of related data grid
                            </xs:documentation>
                        </xs:annotation>
                    </xs:attribute>
                    <xs:attribute default="" name="uniqueID" type="xs:string" use="optional">
                        <xs:annotation>
                            <xs:documentation>
                                the unique id of this navigation item (necessary if data grid is referenced several times)
                            </xs:documentation>
                        </xs:annotation>
                    </xs:attribute>
                </xs:extension>
            </xs:complexContent>
        </xs:complexType>
    </xs:element>
<xs:element name="nav.evaluation">
        <xs:annotation>
            <xs:documentation>
                references an evaluation defined in evaluations.xml
                default propertyKey: property of the referenced evaluation (specific or default)
            </xs:documentation>
        </xs:annotation>

        <xs:complexType>
            <xs:complexContent>
                <xs:extension base="nav.filterablebaseitem">
                    <xs:attribute name="evaluation.idref" type="xs:string" use="required">
                        <xs:annotation>
                            <xs:documentation>
                                the unique id of related evaluation
                            </xs:documentation>
                        </xs:annotation>
                    </xs:attribute>
                    <xs:attribute default="" name="hierarchyType" type="xs:string" use="optional">
                        <xs:annotation>
                            <xs:documentation>
                                a shortcut for the parameter hierarchyType
                            </xs:documentation>
                        </xs:annotation>
                    </xs:attribute>
                    <xs:attribute default="" name="uniqueID" type="xs:string" use="optional">
                        <xs:annotation>
                            <xs:documentation>
                                the unique id of this navigation item (necessary if evaluation is referenced several times)
                            </xs:documentation>
                        </xs:annotation>
                    </xs:attribute>
                </xs:extension>
            </xs:complexContent>
        </xs:complexType>
    </xs:element>
<xs:element name="nav.runtimeaccess">
        <xs:annotation>
            <xs:documentation>
                Restricts access to a navigation item based on a runtime state which is not defined by static metadata.
                The particular access decision is made in a java implementation which must be mapped under the
                "NavigationRuntimeAccess" mapping type in blClassMappings.xml
            </xs:documentation>
        </xs:annotation>

        <xs:complexType>
            <xs:sequence>
                <xs:element maxOccurs="unbounded" minOccurs="0" ref="nav.parameter"/>
            </xs:sequence>
            <xs:attribute name="id" type="xs:string" use="required">
                <xs:annotation>
                    <xs:documentation>
                        "id" must be defined in 'statisticClassMapping.xml'
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
        </xs:complexType>

    </xs:element>
<xs:element name="nav.access">
        <xs:annotation>
            <xs:documentation>
                Groups all access restriction elements.
                Items inherit all access restriction elements from their parent items.
                All sub items of different kind are interpreted as AND connected i.e. each of them must be fulfilled.
                Example: If one nav.access.component and one nav.access.privilege are specified then each of them must be fulfilled.
            </xs:documentation>
        </xs:annotation>

        <xs:complexType>
            <xs:sequence>
                <xs:element maxOccurs="1" minOccurs="0" ref="nav.access.component"/>
                <xs:element maxOccurs="1" minOccurs="0" ref="nav.access.privilege"/>
                <xs:element maxOccurs="1" minOccurs="0" ref="nav.access.role"/>
            </xs:sequence>
        </xs:complexType>
    </xs:element>
<xs:element name="nav.access.component">
        <xs:annotation>
            <xs:documentation>
                restrict the access to a set of licensed components. At least one of them must be available.
            </xs:documentation>
        </xs:annotation>

        <xs:complexType>
            <xs:attribute name="licensedComponentIDs" type="xs:string" use="required">
                <xs:annotation>
                    <xs:documentation>
                        a comma-separated list of licensedComponentIDs, specified in com.idsscheer.webapps.arcm.common.license.LicensedComponent
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
        </xs:complexType>
    </xs:element>
<xs:element name="nav.access.privilege">
        <xs:annotation>
            <xs:documentation>
                restrict the access to component privileges and/or one object privilege or action privilege.
                The privileges an user has are determined by his assigned roles (or by the specific selected role at object forms)
                If component privileges are specified then the user must have at least one of them.
                If an object privilege is specified then the user must have this one.
                If an action privilege is specified then the user must have this one.
                Both object and action privilege refer to the related object type if specified.
            </xs:documentation>
        </xs:annotation>

        <xs:complexType>
            <xs:attribute name="componentPrivilegeIDs" type="xs:string" use="optional">
                <xs:annotation>
                    <xs:documentation>
                        a comma-separated list of componentPrivileges, specified in roles.xml/systemPrivileges
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="relatedObjectTypeID" type="xs:string" use="optional">
                <xs:annotation>
                    <xs:documentation>
                        the ID of the object type the values in attribute "privileges" refers to. Can be omitted if this
                        information can be derived from the context (form IObjectType, data grid main IObjectType)
                        Examples: TESTCASE, RISKASSESSMENT
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="objectPrivilege" use="optional">
                <xs:annotation>
                    <xs:documentation>
                        one of the possible object privileges specified in roles.xml
                    </xs:documentation>
                </xs:annotation>
                <xs:simpleType>
                    <xs:restriction base="xs:string">
                        <xs:enumeration value="READ"/>
                        <xs:enumeration value="WRITE"/>
                        <xs:enumeration value="CREATE"/>
                        <xs:enumeration value="DELETE"/>
                        <xs:enumeration value="UNDELETE"/>
                    </xs:restriction>
                </xs:simpleType>
            </xs:attribute>
            <xs:attribute name="actionPrivilege" use="optional">
                <xs:annotation>
                    <xs:documentation>
                        one of the action privileges 'extend' and 'reset' specified in roles.xml/actionPrivileges
                    </xs:documentation>
                </xs:annotation>
                <xs:simpleType>
                    <xs:restriction base="xs:string">
                        <xs:enumeration value="extend"/>
                        <xs:enumeration value="reset"/>
                    </xs:restriction>
                </xs:simpleType>
            </xs:attribute>
        </xs:complexType>
    </xs:element>
<xs:element name="nav.access.role">
        <xs:annotation>
            <xs:documentation>
                restrict the access to a set of roles. The user must at least have one of them assigned (and at object
                forms the selected role must be one of them).
            </xs:documentation>
        </xs:annotation>

        <xs:complexType>
            <xs:attribute name="roleIDs" type="xs:string" use="required">
                <xs:annotation>
                    <xs:documentation>
                        a comma-separated list of roleIDs, specified in enumerations.xml/userrole (whitespaces allowed)
                        '*' can be uses as wildcard for 'any role'
                        syntax: [userroleID](:[userroleLevel])
                        Examples: TESTMANAGER, RISKMANAGER:OBJECT, *:CROSSCLIENT
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
        </xs:complexType>
    </xs:element>
<xs:element name="nav.filter">
        <xs:annotation>
            <xs:documentation>
                allows to specify custom filter to a filterable navigation item (e.g. evaluations, data grids)
            </xs:documentation>
        </xs:annotation>

        <xs:complexType>
            <xs:attribute name="name" type="xs:string" use="required">
                <xs:annotation>
                    <xs:documentation>
                        the name of the filter
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="value" type="xs:string" use="required">
                <xs:annotation>
                    <xs:documentation>
                        the value of the filter
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute default="EQUALS" name="comparator" type="xs:string" use="optional">
                <xs:annotation>
                    <xs:documentation>
                        the comparator of the filter
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
        </xs:complexType>
    </xs:element>
<xs:element name="version">
        <xs:annotation>
            <xs:documentation>
                Application tag must be set to specify the application version this customizing is based on
            </xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:attribute name="application" type="xs:string" use="required">
                <xs:annotation>
                    <xs:documentation>
                        Version tag must be equal to the standard version (versions of application), e.g. '4.0.0.2'.
                        If the version inside your customizing differs to the standard the application won't start up
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
<!--
            <xs:attribute name="schema" type="xs:string" use="required">
                <xs:annotation>
                    <xs:documentation>
                        Version tag must be equal to the standard version (versions of dbms schema).
                        If the version inside your customizing differs to the standard you have to write migration steps (see migration guide)
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="customizing" type="xs:string" use="required">
                <xs:annotation>
                    <xs:documentation>
                        Name of your customizing must be filled.
                        If you're going to modify an already delivered version please also change this name and write migration steps (see migration guide)
                        e.g: customizingName_v1 -> customizingName_v2
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute> -->
        </xs:complexType>
    </xs:element>
<xs:element name="schema">
        <xs:annotation>
        <xs:documentation>
            Schema tag must be overwritten if object types are modified
        </xs:documentation>
        </xs:annotation>
       <xs:complexType>
            <xs:attribute name="version" type="xs:string" use="required">
                <xs:annotation>
                <xs:documentation>
               Version tag must be equal to the standard version (versions of dbms schema).
               If the version inside your customizing differs to the standard you have to write migration steps (see migration guide)
           </xs:documentation>
           </xs:annotation>
       </xs:attribute>

            <xs:attribute name="customizing" type="xs:string" use="required">
           <xs:annotation>
           <xs:documentation>
               Name of your customizing must be filled.
               If you're going to modify an already delivered version please also change this name and write migration steps (see migration guide)
               e.g: customizingName_v1 -&gt; customizingName_v2
           </xs:documentation>
           </xs:annotation>
    </xs:attribute>
       </xs:complexType>
   </xs:element>
<xs:element name="custom">
        <xs:complexType>
			<xs:sequence>
                <xs:element maxOccurs="1" minOccurs="0" ref="version"/>
                <xs:element maxOccurs="unbounded" minOccurs="0" ref="ruleContext"/>
                <xs:element maxOccurs="unbounded" minOccurs="0" ref="ruleSet"/>
                <xs:element maxOccurs="unbounded" minOccurs="0" ref="uiClassMapping"/>
                <xs:element maxOccurs="unbounded" minOccurs="0" ref="blClassMapping"/>
                <xs:element maxOccurs="unbounded" minOccurs="0" ref="replacements"/>
                <xs:element maxOccurs="unbounded" minOccurs="0" ref="vcMapping"/>
                <xs:element maxOccurs="unbounded" minOccurs="0" ref="enum"/>
                <xs:element maxOccurs="1" minOccurs="0" ref="schema"/>
                <xs:element maxOccurs="unbounded" minOccurs="0" ref="objectType"/>
                <xs:element maxOccurs="unbounded" minOccurs="0" ref="view"/>
                <xs:element maxOccurs="unbounded" minOccurs="0" ref="roles"/>
                <xs:element maxOccurs="unbounded" minOccurs="0" ref="rightsPaths"/>
				<xs:element maxOccurs="unbounded" minOccurs="0" ref="buttonDefinition"/>
				<xs:element maxOccurs="unbounded" minOccurs="0" ref="segregationsOfDuties"/>
				<xs:element maxOccurs="unbounded" minOccurs="0" ref="includes"/>
				<xs:element maxOccurs="unbounded" minOccurs="0" ref="dialog"/>
                <xs:element maxOccurs="unbounded" minOccurs="0" ref="form"/>
                <xs:element maxOccurs="unbounded" minOccurs="0" ref="filter"/>
                <xs:element maxOccurs="unbounded" minOccurs="0" ref="list"/>
                <xs:element maxOccurs="unbounded" minOccurs="0" ref="treeList"/>
                <xs:element maxOccurs="unbounded" minOccurs="0" ref="evaluation"/>
                <xs:element maxOccurs="unbounded" minOccurs="0" ref="tabMapping"/>
                <xs:element maxOccurs="unbounded" minOccurs="0" ref="actionCommands"/>
                <xs:element maxOccurs="unbounded" minOccurs="0" ref="offlineProcessing"/>
                <xs:element maxOccurs="unbounded" minOccurs="0" ref="arisreportstyle"/>
                <xs:element maxOccurs="unbounded" minOccurs="0" ref="arisreport"/>
                <xs:element maxOccurs="unbounded" minOccurs="0" ref="arisreportselection"/>
                <xs:element maxOccurs="unbounded" minOccurs="0" ref="nodeTypes"/>
                <xs:element maxOccurs="unbounded" minOccurs="0" ref="workflow"/>
                <xs:element maxOccurs="unbounded" minOccurs="0" ref="catalog"/>
                <xs:element maxOccurs="unbounded" minOccurs="0" ref="task"/>
                <xs:element maxOccurs="1" minOccurs="0" ref="rulesconfig"/>
                <xs:element maxOccurs="1" minOccurs="0" ref="navigation"/>
			</xs:sequence>
		</xs:complexType>
	</xs:element>


</xs:schema>
